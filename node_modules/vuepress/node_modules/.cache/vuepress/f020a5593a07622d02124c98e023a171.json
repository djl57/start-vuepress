{"remainingRequest":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\github\\start-vuepress\\docs\\jsdoc\\README.md?vue&type=template&id=b2649ce4&","dependencies":[{"path":"E:\\github\\start-vuepress\\docs\\jsdoc\\README.md","mtime":1548127359671},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"目录\\\"><a href=\\\"#目录\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 目录</h1> <p>目前为止，拥有forEach方法的对象类型有 ：</p> <ul><li>Set对象结构</li> <li>Map对象结构</li> <li>数组对象</li></ul> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">keys()方法和values()方法的具体差异</p> <p>Set()对象结构的keys()方法和values()方法返回的迭代器对象的value值是一样的，因为Set对象的键和值本来就是由同一个值生成的</p> <p>Map()对象结构的keys()方法和values()方法返回的迭代器对象的value值不一样，keys的value值是键的值，values的value值是值的值</p></div> <div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">注意</p> <p>当Set或者Map对象的键为引用值时，需要将其保存到一个变量中，再使用</p></div> <p>数组查找方法：</p> <table><thead><tr><th style=\\\"text-align:center\\\">方法</th> <th style=\\\"text-align:center\\\">描述</th> <th style=\\\"text-align:center\\\">找到返回值</th> <th style=\\\"text-align:center\\\">没找到返回值</th></tr></thead> <tbody><tr><td style=\\\"text-align:center\\\">find()</td> <td style=\\\"text-align:center\\\">根据提供的函数查找</td> <td style=\\\"text-align:center\\\">第一个满足函数的值</td> <td style=\\\"text-align:center\\\">undefined</td></tr> <tr><td style=\\\"text-align:center\\\">findIndex()</td> <td style=\\\"text-align:center\\\">根据提供的函数查找</td> <td style=\\\"text-align:center\\\">第一个满足函数的索引</td> <td style=\\\"text-align:center\\\">-1</td></tr> <tr><td style=\\\"text-align:center\\\">includes()</td> <td style=\\\"text-align:center\\\">根据提供的元素查找</td> <td style=\\\"text-align:center\\\">true：表示找到</td> <td style=\\\"text-align:center\\\">false：表示没找到</td></tr> <tr><td style=\\\"text-align:center\\\">indexOf()</td> <td style=\\\"text-align:center\\\">根据提供的元素查找</td> <td style=\\\"text-align:center\\\">找到的第一个元素的索引</td> <td style=\\\"text-align:center\\\">-1</td></tr> <tr><td style=\\\"text-align:center\\\">lastIndexOf()</td> <td style=\\\"text-align:center\\\">根据提供的元素查找</td> <td style=\\\"text-align:center\\\">找到的第一个元素的索引</td> <td style=\\\"text-align:center\\\">-1</td></tr></tbody></table>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}