{"remainingRequest":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\github\\start-vuepress\\docs\\jsdoc\\array.md?vue&type=template&id=384fb3ac&","dependencies":[{"path":"E:\\github\\start-vuepress\\docs\\jsdoc\\array.md","mtime":1548732152421},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"数组\"><a class=\"header-anchor\" href=\"#数组\" aria-hidden=\"true\">#</a> 数组</h1>\n<h2 id=\"介绍\"><a class=\"header-anchor\" href=\"#介绍\" aria-hidden=\"true\">#</a> 介绍</h2>\n<p>数组对象用于在单个的变量中存储多个值</p>\n<h2 id=\"属性\"><a class=\"header-anchor\" href=\"#属性\" aria-hidden=\"true\">#</a> 属性</h2>\n<h3 id=\"length\"><a class=\"header-anchor\" href=\"#length\" aria-hidden=\"true\">#</a> length</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 5</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 11</span>\narr <span class=\"token comment\">// [1, 2, 3, 4, 5, empty × 5, 9]</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\narr <span class=\"token comment\">// [1, 2, 3, 4, 5, empty × 2]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"constructor\"><a class=\"header-anchor\" href=\"#constructor\" aria-hidden=\"true\">#</a> constructor</h3>\n<h4 id=\"描述：构造器，默认是array函数\"><a class=\"header-anchor\" href=\"#描述：构造器，默认是array函数\" aria-hidden=\"true\">#</a> 描述：构造器，默认是Array函数</h4>\n<h2 id=\"创建数组\"><a class=\"header-anchor\" href=\"#创建数组\" aria-hidden=\"true\">#</a> 创建数组</h2>\n<h3 id=\"字面量或者array构造器\"><a class=\"header-anchor\" href=\"#字面量或者array构造器\" aria-hidden=\"true\">#</a> 字面量或者Array构造器</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// new Array() 有三种使用方式</span>\n<span class=\"token comment\">// 1.无参数</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span>\n                 <span class=\"token comment\">// length: 0</span>\n                 <span class=\"token comment\">// __proto__: Array(0)</span>\n<span class=\"token comment\">// 2.一个参数</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (10) [empty × 10]</span>\n                 <span class=\"token comment\">// length: 10</span>\n                 <span class=\"token comment\">// __proto__: Array(0)</span>\n<span class=\"token comment\">// 3.多于一个参数</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (2) [10, 20]</span>\n                 <span class=\"token comment\">// 0: 10</span>\n                 <span class=\"token comment\">// 1: 20</span>\n                 <span class=\"token comment\">// length: 2</span>\n                 <span class=\"token comment\">// __proto__: Array(0)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"从-类数组对象-或者-可迭代对象-中创建一个新的数组实例：\"><a class=\"header-anchor\" href=\"#从-类数组对象-或者-可迭代对象-中创建一个新的数组实例：\" aria-hidden=\"true\">#</a> 从 类数组对象 或者 可迭代对象 中创建一个新的数组实例：</h3>\n<h4 id=\"类数组对象：它是一个长得很像数组对象的对象，通过一些方法可以将它变为数组对象\"><a class=\"header-anchor\" href=\"#类数组对象：它是一个长得很像数组对象的对象，通过一些方法可以将它变为数组对象\" aria-hidden=\"true\">#</a> 类数组对象：它是一个长得很像数组对象的对象，通过一些方法可以将它变为数组对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// arguments即是类数组对象</span>\n  <span class=\"token comment\">// 箭头函数中没有arguments</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"通过es5的方法将其变为数组对象\"><a class=\"header-anchor\" href=\"#通过es5的方法将其变为数组对象\" aria-hidden=\"true\">#</a> 通过es5的方法将其变为数组对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"通过es6的方法将其变为数组对象\"><a class=\"header-anchor\" href=\"#通过es6的方法将其变为数组对象\" aria-hidden=\"true\">#</a> 通过es6的方法将其变为数组对象</h4>\n<h3 id=\"array-from\"><a class=\"header-anchor\" href=\"#array-from\" aria-hidden=\"true\">#</a> Array.from()</h3>\n<h4 id=\"参数：-arraylike-：想要转变为数组对象的类数组对象；-mapfn-：转变完成后得到的新数组立即要执行的map函数；-thisarg-：执行mapfn时的this对象\"><a class=\"header-anchor\" href=\"#参数：-arraylike-：想要转变为数组对象的类数组对象；-mapfn-：转变完成后得到的新数组立即要执行的map函数；-thisarg-：执行mapfn时的this对象\" aria-hidden=\"true\">#</a> 参数：[arrayLike]：想要转变为数组对象的类数组对象；[mapFn]：转变完成后得到的新数组立即要执行的map函数；[thisArg]：执行mapFn时的this对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> mapFn<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>等同于</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>mapFn<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n<hr>\n<h4 id=\"可迭代对象：部署了遍历器（iterator）接口的数据结构。字符串和set结构都具有遍历器接口，所以是可迭代对象，就可以用array-from-将其变为数组对象\"><a class=\"header-anchor\" href=\"#可迭代对象：部署了遍历器（iterator）接口的数据结构。字符串和set结构都具有遍历器接口，所以是可迭代对象，就可以用array-from-将其变为数组对象\" aria-hidden=\"true\">#</a> 可迭代对象：部署了遍历器（Iterator）接口的数据结构。字符串和Set结构都具有遍历器接口，所以是可迭代对象，就可以用Array.from()将其变为数组对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 字符串</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]</span>\n\n<span class=\"token comment\">// Set结构 待了解</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(3) {\"1\", \"2\", \"3\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (3) [\"1\", \"2\", \"3\"]</span>\n<span class=\"token keyword\">let</span> se <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(2) {\"a\", \"b\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (2) [\"a\", \"b\"]</span>\n\n<span class=\"token comment\">// Map结构 待了解</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型：\"><a class=\"header-anchor\" href=\"#创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型：\" aria-hidden=\"true\">#</a> 创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型：</h3>\n<h3 id=\"array-of\"><a class=\"header-anchor\" href=\"#array-of\" aria-hidden=\"true\">#</a> Array.of()</h3>\n<h4 id=\"参数：-el-：新数组中的元素\"><a class=\"header-anchor\" href=\"#参数：-el-：新数组中的元素\" aria-hidden=\"true\">#</a> 参数：[el]：新数组中的元素</h4>\n<h4 id=\"返回值：返回一个新的数组实例\"><a class=\"header-anchor\" href=\"#返回值：返回一个新的数组实例\" aria-hidden=\"true\">#</a> 返回值：返回一个新的数组实例</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (5) [\"a\", \"b\", \"c\", 12, {…}]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"与new-array-的区别？\"><a class=\"header-anchor\" href=\"#与new-array-的区别？\" aria-hidden=\"true\">#</a> 与new Array()的区别？</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (7) [empty × 7]</span>\n<span class=\"token keyword\">let</span> arrOf <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"如何兼容低版本？\"><a class=\"header-anchor\" href=\"#如何兼容低版本？\" aria-hidden=\"true\">#</a> 如何兼容低版本？</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// (5) [\"a\", \"b\", \"c\", 12, {…}]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"数组去重合并\"><a class=\"header-anchor\" href=\"#数组去重合并\" aria-hidden=\"true\">#</a> 数组去重合并</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token comment\">// apply()和call()的区别在于apply接受一个参数数组，call接受的是参数列表</span>\n  <span class=\"token comment\">// let arr = [].concat.call(...arguments)</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"什么是set结构？\"><a class=\"header-anchor\" href=\"#什么是set结构？\" aria-hidden=\"true\">#</a> 什么是Set结构？</h2>\n<h4 id=\"描述：set-对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用\"><a class=\"header-anchor\" href=\"#描述：set-对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用\" aria-hidden=\"true\">#</a> 描述：Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用</h4>\n<h4 id=\"参数：具有迭代器（iterator）的对象\"><a class=\"header-anchor\" href=\"#参数：具有迭代器（iterator）的对象\" aria-hidden=\"true\">#</a> 参数：具有迭代器（iterator）的对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(0) {}</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(3) {\"s\", \"t\", \"r\"}</span>\n<span class=\"token keyword\">let</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(2) {\"a\", \"b\"}</span>\n<span class=\"token keyword\">let</span> s4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ssstrrr'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(3) {\"s\", \"t\", \"r\"}</span>\n\n<span class=\"token keyword\">let</span> s5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：number 1 is not iterable (cannot read property Symbol(Symbol.iterator))</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> s6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：object is not iterable (cannot read property Symbol(Symbol.iterator))</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s6<span class=\"token punctuation\">)</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>对于 Set s， +0 （+0 严格相等于-0?）和-0是不同的值。</p>\n<p>NaN和undefined都可以被存储在Set 中， NaN之间被视为相同的值（尽管 NaN !== NaN）</p>\n</div>\n<h3 id=\"set对象的属性：\"><a class=\"header-anchor\" href=\"#set对象的属性：\" aria-hidden=\"true\">#</a> set对象的属性：</h3>\n<h3 id=\"prototype\"><a class=\"header-anchor\" href=\"#prototype\" aria-hidden=\"true\">#</a> prototype</h3>\n<h4 id=\"描述：set构造器的原型\"><a class=\"header-anchor\" href=\"#描述：set构造器的原型\" aria-hidden=\"true\">#</a> 描述：set构造器的原型</h4>\n<h3 id=\"set-prototype-constructor\"><a class=\"header-anchor\" href=\"#set-prototype-constructor\" aria-hidden=\"true\">#</a> Set.prototype.constructor</h3>\n<h4 id=\"描述：set构造器\"><a class=\"header-anchor\" href=\"#描述：set构造器\" aria-hidden=\"true\">#</a> 描述：set构造器</h4>\n<h3 id=\"set-prototype-size\"><a class=\"header-anchor\" href=\"#set-prototype-size\" aria-hidden=\"true\">#</a> Set.prototype.size</h3>\n<h4 id=\"描述：set对象的值的个数\"><a class=\"header-anchor\" href=\"#描述：set对象的值的个数\" aria-hidden=\"true\">#</a> 描述：set对象的值的个数</h4>\n<hr>\n<h3 id=\"set对象的方法：\"><a class=\"header-anchor\" href=\"#set对象的方法：\" aria-hidden=\"true\">#</a> set对象的方法：</h3>\n<h3 id=\"add\"><a class=\"header-anchor\" href=\"#add\" aria-hidden=\"true\">#</a> add()</h3>\n<h4 id=\"描述：在尾部添加一个元素\"><a class=\"header-anchor\" href=\"#描述：在尾部添加一个元素\" aria-hidden=\"true\">#</a> 描述：在尾部添加一个元素</h4>\n<h4 id=\"参数：-val-：要添加的元素\"><a class=\"header-anchor\" href=\"#参数：-val-：要添加的元素\" aria-hidden=\"true\">#</a> 参数：[val]：要添加的元素</h4>\n<h4 id=\"返回值：返回添加元素后的新set对象\"><a class=\"header-anchor\" href=\"#返回值：返回添加元素后的新set对象\" aria-hidden=\"true\">#</a> 返回值：返回添加元素后的新set对象</h4>\n<hr>\n<h3 id=\"clear\"><a class=\"header-anchor\" href=\"#clear\" aria-hidden=\"true\">#</a> clear()</h3>\n<h4 id=\"描述：清空一个set对象里面的元素\"><a class=\"header-anchor\" href=\"#描述：清空一个set对象里面的元素\" aria-hidden=\"true\">#</a> 描述：清空一个set对象里面的元素</h4>\n<h4 id=\"返回值：undefined\"><a class=\"header-anchor\" href=\"#返回值：undefined\" aria-hidden=\"true\">#</a> 返回值：undefined</h4>\n<hr>\n<h3 id=\"delete\"><a class=\"header-anchor\" href=\"#delete\" aria-hidden=\"true\">#</a> delete()</h3>\n<h4 id=\"描述：从一个set对象中删除指定的元素\"><a class=\"header-anchor\" href=\"#描述：从一个set对象中删除指定的元素\" aria-hidden=\"true\">#</a> 描述：从一个set对象中删除指定的元素</h4>\n<h4 id=\"参数：-val-：将要删除的元素\"><a class=\"header-anchor\" href=\"#参数：-val-：将要删除的元素\" aria-hidden=\"true\">#</a> 参数：[val]：将要删除的元素</h4>\n<h4 id=\"返回值：删除成功返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：删除成功返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：删除成功返回true，否则返回false</h4>\n<hr>\n<h3 id=\"foreach-（和array的foreach方法类似）\"><a class=\"header-anchor\" href=\"#foreach-（和array的foreach方法类似）\" aria-hidden=\"true\">#</a> forEach() （和array的forEach方法类似）</h3>\n<h4 id=\"描述：\"><a class=\"header-anchor\" href=\"#描述：\" aria-hidden=\"true\">#</a> 描述：</h4>\n<h4 id=\"参数：-fn-：每个元素都会执行的函数；-thisarg-：指定this指向的对象\"><a class=\"header-anchor\" href=\"#参数：-fn-：每个元素都会执行的函数；-thisarg-：指定this指向的对象\" aria-hidden=\"true\">#</a> 参数：[fn]：每个元素都会执行的函数；[thisArg]：指定this指向的对象</h4>\n<h4 id=\"fn的参数：-el-：元素的值；-index-：元素的索引；-setarr-：对象本身\"><a class=\"header-anchor\" href=\"#fn的参数：-el-：元素的值；-index-：元素的索引；-setarr-：对象本身\" aria-hidden=\"true\">#</a> fn的参数：[el]：元素的值；[index]：元素的索引；[setArr]：对象本身</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`s[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 打印结果</span>\ns<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\ns<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b\ns<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>需要注意set对象遍历出来的元素和对应的索引是一样的</p>\n<hr>\n<h3 id=\"has\"><a class=\"header-anchor\" href=\"#has\" aria-hidden=\"true\">#</a> has()</h3>\n<h4 id=\"描述：判断参数是否存在于set对象中\"><a class=\"header-anchor\" href=\"#描述：判断参数是否存在于set对象中\" aria-hidden=\"true\">#</a> 描述：判断参数是否存在于Set对象中</h4>\n<h4 id=\"参数：-val-：要判断的元素\"><a class=\"header-anchor\" href=\"#参数：-val-：要判断的元素\" aria-hidden=\"true\">#</a> 参数：[val]：要判断的元素</h4>\n<h4 id=\"返回值：如果参数存在于set对象中，则返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：如果参数存在于set对象中，则返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：如果参数存在于Set对象中，则返回true，否则返回false</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">注意</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(5) {\"a\", \"b\", \"c\", {…}, {…}}</span>\n                <span class=\"token comment\">// size: (...)</span>\n                <span class=\"token comment\">// __proto__: Set</span>\n                <span class=\"token comment\">// [[Entries]]: Array(5)</span>\n                <span class=\"token comment\">// 0: \"a\"</span>\n                <span class=\"token comment\">// 1: \"b\"</span>\n                <span class=\"token comment\">// 2: \"c\"</span>\n                <span class=\"token comment\">// 3: value: {name: \"djlun\"}</span>\n                <span class=\"token comment\">// 4: value: {name: \"djlun\"}</span>\n                <span class=\"token comment\">// length: 5</span>\n\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Set(6) {\"a\", \"b\", \"c\", {…}, {…}, …}</span>\n                <span class=\"token comment\">// size: (...)</span>\n                <span class=\"token comment\">// __proto__: Set</span>\n                <span class=\"token comment\">// [[Entries]]: Array(6)</span>\n                <span class=\"token comment\">// 0: \"a\"</span>\n                <span class=\"token comment\">// 1: \"b\"</span>\n                <span class=\"token comment\">// 2: \"c\"</span>\n                <span class=\"token comment\">// 3: value: {name: \"djlun\"}</span>\n                <span class=\"token comment\">// 4: value: {name: \"djlun\"}</span>\n                <span class=\"token comment\">// 5: value: {name: \"djlun\"}</span>\n                <span class=\"token comment\">// length: 6</span>\n                <span class=\"token comment\">// 此时上面的[[Entries]]的length也变为了6</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n<hr>\n<h3 id=\"entries\"><a class=\"header-anchor\" href=\"#entries\" aria-hidden=\"true\">#</a> entries()</h3>\n<h4 id=\"描述：返回一个新的迭代器对象，这个对象的元素是类似-value-value-形式的数组，这是为了和map的迭代器对象保持格式一致\"><a class=\"header-anchor\" href=\"#描述：返回一个新的迭代器对象，这个对象的元素是类似-value-value-形式的数组，这是为了和map的迭代器对象保持格式一致\" aria-hidden=\"true\">#</a> 描述：返回一个新的迭代器对象，这个对象的元素是类似[value, value]形式的数组，这是为了和map的迭代器对象保持格式一致</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> setInter <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n                              <span class=\"token comment\">// done: false</span>\n                              <span class=\"token comment\">// value: (2) [\"a\", \"a\"]</span>\n                              <span class=\"token comment\">// __proto__: Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n                              <span class=\"token comment\">// done: false</span>\n                              <span class=\"token comment\">// value: (2) [\"b\", \"b\"]</span>\n                              <span class=\"token comment\">// __proto__: Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n                              <span class=\"token comment\">// done: false</span>\n                              <span class=\"token comment\">// value: (2) [\"c\", \"c\"]</span>\n                              <span class=\"token comment\">// __proto__: Object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: undefined, done: true}</span>\n                              <span class=\"token comment\">// done: true</span>\n                              <span class=\"token comment\">// value: undefined</span>\n                              <span class=\"token comment\">// __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"values\"><a class=\"header-anchor\" href=\"#values\" aria-hidden=\"true\">#</a> values()</h3>\n<h4 id=\"描述：返回一个-iterator-对象，这个对象包含了原-set-对象里的每个元素。\"><a class=\"header-anchor\" href=\"#描述：返回一个-iterator-对象，这个对象包含了原-set-对象里的每个元素。\" aria-hidden=\"true\">#</a> 描述：返回一个 Iterator 对象，这个对象包含了原 Set 对象里的每个元素。</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> sInter <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: \"a\", done: false}</span>\n                            <span class=\"token comment\">// done: false</span>\n                            <span class=\"token comment\">// value: \"a\"</span>\n                            <span class=\"token comment\">// __proto__: Object</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: \"b\", done: false}</span>\n                            <span class=\"token comment\">// done: false</span>\n                            <span class=\"token comment\">// value: \"b\"</span>\n                            <span class=\"token comment\">// __proto__: Object</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: \"c\", done: false}</span>\n                            <span class=\"token comment\">// done: false</span>\n                            <span class=\"token comment\">// value: \"c\"</span>\n                            <span class=\"token comment\">// __proto__: Object</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sInter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: undefined, done: true}</span>\n                            <span class=\"token comment\">// done: true</span>\n                            <span class=\"token comment\">// value: undefined</span>\n                            <span class=\"token comment\">// __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>与entries()的区别在于value值</p>\n</div>\n<hr>\n<h3 id=\"keys\"><a class=\"header-anchor\" href=\"#keys\" aria-hidden=\"true\">#</a> keys()</h3>\n<h4 id=\"描述：与values-方法一样\"><a class=\"header-anchor\" href=\"#描述：与values-方法一样\" aria-hidden=\"true\">#</a> 描述：与values()方法一样</h4>\n<h3 id=\"set-对象的迭代-遍历\"><a class=\"header-anchor\" href=\"#set-对象的迭代-遍历\" aria-hidden=\"true\">#</a> Set()对象的迭代(遍历)</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\na\nb\nc\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\na\nb\nc\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\na\nb\nc\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\na a\nb b\nc c\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"set和array互换\"><a class=\"header-anchor\" href=\"#set和array互换\" aria-hidden=\"true\">#</a> Set和Array互换</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Set(3) {\"a\", \"b\", \"c\"}</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (3) [\"a\", \"b\", \"c\"]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"使用set实现数学上的集合定义\"><a class=\"header-anchor\" href=\"#使用set实现数学上的集合定义\" aria-hidden=\"true\">#</a> 使用Set实现数学上的集合定义</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"noopener noreferrer\">基本集合操作<OutboundLink/></a></p>\n<hr>\n<h2 id=\"什么是map结构？\"><a class=\"header-anchor\" href=\"#什么是map结构？\" aria-hidden=\"true\">#</a> 什么是Map结构？</h2>\n<h4 id=\"描述：保存键值对。（和对象的作用类似，但是又有区别）\"><a class=\"header-anchor\" href=\"#描述：保存键值对。（和对象的作用类似，但是又有区别）\" aria-hidden=\"true\">#</a> 描述：保存键值对。（和对象的作用类似，但是又有区别）</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"创建一个map对象\"><a class=\"header-anchor\" href=\"#创建一个map对象\" aria-hidden=\"true\">#</a> 创建一个Map对象</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"注意！当一个map对象的键为引用值时\"><a class=\"header-anchor\" href=\"#注意！当一个map对象的键为引用值时\" aria-hidden=\"true\">#</a> 注意！当一个Map对象的键为引用值时</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'一个记录我的名字的对象'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined </span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'一个记录我的信息的数组'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined </span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>我们会发现这个键是不存在的，因为:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// fasle</span>\nobj <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此时，我们应该这样给Map对象添加键值对</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span>\n    age <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">}</span>\n    me <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'记录我名字的一个对象'</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> <span class=\"token string\">'记录我年龄的一个对象'</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">,</span> <span class=\"token string\">'记录我信息的一个数组'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 记录我信息的一个数组</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"map和object的比较？\"><a class=\"header-anchor\" href=\"#map和object的比较？\" aria-hidden=\"true\">#</a> Map和Object的比较？</h3>\n<h4 id=\"相似点：\"><a class=\"header-anchor\" href=\"#相似点：\" aria-hidden=\"true\">#</a> 相似点：</h4>\n<p>都允许按键存取一个值、删除键、检测一个键是否绑定了值</p>\n<h4 id=\"区别：\"><a class=\"header-anchor\" href=\"#区别：\" aria-hidden=\"true\">#</a> 区别：</h4>\n<ul>\n<li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型</li>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值</li>\n<li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算</li>\n<li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见</li>\n<li>Map 在涉及频繁增删键值对的场景下会有些性能优势</li>\n</ul>\n<h3 id=\"map对象的属性：\"><a class=\"header-anchor\" href=\"#map对象的属性：\" aria-hidden=\"true\">#</a> Map对象的属性：</h3>\n<h3 id=\"length-2\"><a class=\"header-anchor\" href=\"#length-2\" aria-hidden=\"true\">#</a> length</h3>\n<h4 id=\"描述：值为0\"><a class=\"header-anchor\" href=\"#描述：值为0\" aria-hidden=\"true\">#</a> 描述：值为0</h4>\n<hr>\n<h3 id=\"prototype-2\"><a class=\"header-anchor\" href=\"#prototype-2\" aria-hidden=\"true\">#</a> prototype</h3>\n<h4 id=\"描述：map构造器的原型\"><a class=\"header-anchor\" href=\"#描述：map构造器的原型\" aria-hidden=\"true\">#</a> 描述：Map构造器的原型</h4>\n<hr>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>和其他类型对象一样，Map对象实例也会继承Map.prototype的属性和方法</p>\n</div>\n<hr>\n<h3 id=\"constructor-2\"><a class=\"header-anchor\" href=\"#constructor-2\" aria-hidden=\"true\">#</a> constructor</h3>\n<h4 id=\"描述：map对象的构造器，默认是map函数\"><a class=\"header-anchor\" href=\"#描述：map对象的构造器，默认是map函数\" aria-hidden=\"true\">#</a> 描述：Map对象的构造器，默认是Map函数</h4>\n<hr>\n<h3 id=\"size\"><a class=\"header-anchor\" href=\"#size\" aria-hidden=\"true\">#</a> size</h3>\n<h4 id=\"描述：map对象键值对的数量\"><a class=\"header-anchor\" href=\"#描述：map对象键值对的数量\" aria-hidden=\"true\">#</a> 描述：Map对象键值对的数量</h4>\n<h3 id=\"map对象的方法：\"><a class=\"header-anchor\" href=\"#map对象的方法：\" aria-hidden=\"true\">#</a> map对象的方法：</h3>\n<h3 id=\"clear-2\"><a class=\"header-anchor\" href=\"#clear-2\" aria-hidden=\"true\">#</a> clear()</h3>\n<h4 id=\"描述：移除map对象的所有键值对\"><a class=\"header-anchor\" href=\"#描述：移除map对象的所有键值对\" aria-hidden=\"true\">#</a> 描述：移除Map对象的所有键值对</h4>\n<h4 id=\"返回值：undefined-2\"><a class=\"header-anchor\" href=\"#返回值：undefined-2\" aria-hidden=\"true\">#</a> 返回值：undefined</h4>\n<hr>\n<h3 id=\"delete-2\"><a class=\"header-anchor\" href=\"#delete-2\" aria-hidden=\"true\">#</a> delete()</h3>\n<h4 id=\"描述：移除map对象中指定的元素\"><a class=\"header-anchor\" href=\"#描述：移除map对象中指定的元素\" aria-hidden=\"true\">#</a> 描述：移除Map对象中指定的元素</h4>\n<h4 id=\"参数：-key-：要移除的元素的键\"><a class=\"header-anchor\" href=\"#参数：-key-：要移除的元素的键\" aria-hidden=\"true\">#</a> 参数：[key]：要移除的元素的键</h4>\n<h4 id=\"返回值：移除成功返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：移除成功返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：移除成功返回true，否则返回false</h4>\n<hr>\n<h3 id=\"set\"><a class=\"header-anchor\" href=\"#set\" aria-hidden=\"true\">#</a> set()</h3>\n<h4 id=\"描述：为map对象添加一个新键值对，或者更新其中的一个键值对\"><a class=\"header-anchor\" href=\"#描述：为map对象添加一个新键值对，或者更新其中的一个键值对\" aria-hidden=\"true\">#</a> 描述：为Map对象添加一个新键值对，或者更新其中的一个键值对</h4>\n<h4 id=\"参数：-key-：要添加的元素的键；-value-：要添加的元素的值\"><a class=\"header-anchor\" href=\"#参数：-key-：要添加的元素的键；-value-：要添加的元素的值\" aria-hidden=\"true\">#</a> 参数：[key]：要添加的元素的键；[value]：要添加的元素的值</h4>\n<h4 id=\"返回值：新的map对象\"><a class=\"header-anchor\" href=\"#返回值：新的map对象\" aria-hidden=\"true\">#</a> 返回值：新的Map对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Map(1) {\"name\" => \"djlun\"}</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Map(2) {\"name\" => \"djlun\", \"age\" => 24}</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Map(2) {\"name\" => \"djlun\", \"age\" => 18}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>到现在的理解是只能一个一个添加\nMap() 虽然记录在这里，但是其实应该归到对象那边去</p>\n</div>\n<hr>\n<h3 id=\"get\"><a class=\"header-anchor\" href=\"#get\" aria-hidden=\"true\">#</a> get()</h3>\n<h4 id=\"描述：获取一个map对象中指定的元素\"><a class=\"header-anchor\" href=\"#描述：获取一个map对象中指定的元素\" aria-hidden=\"true\">#</a> 描述：获取一个Map对象中指定的元素</h4>\n<h4 id=\"参数：-key-：想要获取的元素的键\"><a class=\"header-anchor\" href=\"#参数：-key-：想要获取的元素的键\" aria-hidden=\"true\">#</a> 参数：[key]：想要获取的元素的键</h4>\n<h4 id=\"返回值：找到与参数相同的键则返回对应的值，没找到就返回undefined\"><a class=\"header-anchor\" href=\"#返回值：找到与参数相同的键则返回对应的值，没找到就返回undefined\" aria-hidden=\"true\">#</a> 返回值：找到与参数相同的键则返回对应的值，没找到就返回undefined</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>m<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 18</span>\nm<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"has-2\"><a class=\"header-anchor\" href=\"#has-2\" aria-hidden=\"true\">#</a> has()</h3>\n<h4 id=\"描述：用来检测map对象中是否含有某元素\"><a class=\"header-anchor\" href=\"#描述：用来检测map对象中是否含有某元素\" aria-hidden=\"true\">#</a> 描述：用来检测Map对象中是否含有某元素</h4>\n<h4 id=\"参数：-key-：需要检测的元素的键（不可能有两个同样的键）\"><a class=\"header-anchor\" href=\"#参数：-key-：需要检测的元素的键（不可能有两个同样的键）\" aria-hidden=\"true\">#</a> 参数：[key]：需要检测的元素的键（不可能有两个同样的键）</h4>\n<h4 id=\"返回值：检测到元素则返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：检测到元素则返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：检测到元素则返回true，否则返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>m<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"foreach\"><a class=\"header-anchor\" href=\"#foreach\" aria-hidden=\"true\">#</a> forEach()</h3>\n<h4 id=\"描述：遍历\"><a class=\"header-anchor\" href=\"#描述：遍历\" aria-hidden=\"true\">#</a> 描述：遍历</h4>\n<h4 id=\"参数：-fn-：遍历出来的每个元素要执行的函数；-thisarg-：指定this指向的对象\"><a class=\"header-anchor\" href=\"#参数：-fn-：遍历出来的每个元素要执行的函数；-thisarg-：指定this指向的对象\" aria-hidden=\"true\">#</a> 参数：[fn]：遍历出来的每个元素要执行的函数；[thisArg]：指定this指向的对象</h4>\n<h4 id=\"返回值：undefined-3\"><a class=\"header-anchor\" href=\"#返回值：undefined-3\" aria-hidden=\"true\">#</a> 返回值：undefined</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>m<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nm<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>map<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// djlun name [object Map]</span>\n<span class=\"token comment\">// 18 age [object Map]</span>\n<span class=\"token comment\">// 0 sex [object Map]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"entries-2\"><a class=\"header-anchor\" href=\"#entries-2\" aria-hidden=\"true\">#</a> entries()</h3>\n<h4 id=\"描述：返回一个新的包含-key-value-键值对的迭代器（iterator）对象\"><a class=\"header-anchor\" href=\"#描述：返回一个新的包含-key-value-键值对的迭代器（iterator）对象\" aria-hidden=\"true\">#</a> 描述：返回一个新的包含[key:value]键值对的迭代器（iterator）对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> mIter <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: (2) [\"name\", \"djlun\"]</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: (2) [\"age\", 18]</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: Array(2), done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: (2) [\"sex\", 0]</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: undefined, done: true}</span>\n              <span class=\"token comment\">// done: true</span>\n              <span class=\"token comment\">// value: undefined</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"keys-2\"><a class=\"header-anchor\" href=\"#keys-2\" aria-hidden=\"true\">#</a> keys()</h3>\n<h4 id=\"描述：返回一个新的迭代器对象\"><a class=\"header-anchor\" href=\"#描述：返回一个新的迭代器对象\" aria-hidden=\"true\">#</a> 描述：返回一个新的迭代器对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> mIter2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmIter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"name\", done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: \"name\"</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"age\", done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: \"age\"</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"sex\", done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: \"sex\"</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true}</span>\n              <span class=\"token comment\">// done: true</span>\n              <span class=\"token comment\">// value: undefined</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"values-2\"><a class=\"header-anchor\" href=\"#values-2\" aria-hidden=\"true\">#</a> values()</h3>\n<h4 id=\"描述：返回一个新的迭代器对象-2\"><a class=\"header-anchor\" href=\"#描述：返回一个新的迭代器对象-2\" aria-hidden=\"true\">#</a> 描述：返回一个新的迭代器对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>mIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: \"djlun\", done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: \"djlun\"</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: 18, done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: 18</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: 0, done: false}</span>\n              <span class=\"token comment\">// done: false</span>\n              <span class=\"token comment\">// value: 0</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n\nmIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {value: undefined, done: true}</span>\n              <span class=\"token comment\">// done: true</span>\n              <span class=\"token comment\">// value: undefined</span>\n              <span class=\"token comment\">// __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"通过索引访问数组元素\"><a class=\"header-anchor\" href=\"#通过索引访问数组元素\" aria-hidden=\"true\">#</a> 通过索引访问数组元素</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"遍历数组\"><a class=\"header-anchor\" href=\"#遍历数组\" aria-hidden=\"true\">#</a> 遍历数组</h2>\n<h3 id=\"foreach-这是数组原型上带的方法\"><a class=\"header-anchor\" href=\"#foreach-这是数组原型上带的方法\" aria-hidden=\"true\">#</a> forEach() (这是数组原型上带的方法)</h3>\n<h4 id=\"描述：对数组的每个元素执行一次提供的函数\"><a class=\"header-anchor\" href=\"#描述：对数组的每个元素执行一次提供的函数\" aria-hidden=\"true\">#</a> 描述：对数组的每个元素执行一次提供的函数</h4>\n<h4 id=\"参数：-function-：一个函数\"><a class=\"header-anchor\" href=\"#参数：-function-：一个函数\" aria-hidden=\"true\">#</a> 参数：[function]：一个函数</h4>\n<h4 id=\"方法参数：-el-：遍历出来的每个元素；-index-：每个元素的索引；-arr-：数组本身\"><a class=\"header-anchor\" href=\"#方法参数：-el-：遍历出来的每个元素；-index-：每个元素的索引；-arr-：数组本身\" aria-hidden=\"true\">#</a> 方法参数：[el]：遍历出来的每个元素；[index]：每个元素的索引；[arr]：数组本身</h4>\n<h4 id=\"返回值：undefined-4\"><a class=\"header-anchor\" href=\"#返回值：undefined-4\" aria-hidden=\"true\">#</a> 返回值：undefined</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">1</span>\n<span class=\"token number\">0</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">1</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">2</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">3</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">4</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>没有办法中止或者跳出 forEach 循环，除了抛出一个异常。如果你需要这样，使用forEach()方法是错误的，你可以用一个简单的循环作为替代。如果您正在测试一个数组里的元素是否符合某条件，且需要返回一个布尔值，那么可使用 Array.every 或 Array.some。如果可用，新方法 find() 或者findIndex() 也可被用于真值测试的提早终止。</p>\n</div>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>数组中undefined的项不打印</p>\n</div>\n<hr>\n<h3 id=\"map\"><a class=\"header-anchor\" href=\"#map\" aria-hidden=\"true\">#</a> map()</h3>\n<h4 id=\"描述见下面方法\"><a class=\"header-anchor\" href=\"#描述见下面方法\" aria-hidden=\"true\">#</a> 描述见下面方法</h4>\n<hr>\n<p>其他遍历数组的方法</p>\n<h3 id=\"for循环\"><a class=\"header-anchor\" href=\"#for循环\" aria-hidden=\"true\">#</a> for循环</h3>\n<hr>\n<h2 id=\"添加元素到数组的末尾\"><a class=\"header-anchor\" href=\"#添加元素到数组的末尾\" aria-hidden=\"true\">#</a> 添加元素到数组的末尾</h2>\n<h3 id=\"push\"><a class=\"header-anchor\" href=\"#push\" aria-hidden=\"true\">#</a> push()</h3>\n<h4 id=\"描述：它直接修改原来的数组，而不是创建一个新的数组\"><a class=\"header-anchor\" href=\"#描述：它直接修改原来的数组，而不是创建一个新的数组\" aria-hidden=\"true\">#</a> 描述：它直接修改原来的数组，而不是创建一个新的数组</h4>\n<h4 id=\"参数：-el-：一个或多个，用逗号隔开\"><a class=\"header-anchor\" href=\"#参数：-el-：一个或多个，用逗号隔开\" aria-hidden=\"true\">#</a> 参数：[el]：一个或多个，用逗号隔开</h4>\n<h4 id=\"返回值：新数组的长度\"><a class=\"header-anchor\" href=\"#返回值：新数组的长度\" aria-hidden=\"true\">#</a> 返回值：新数组的长度</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"添加元素到数组的头部\"><a class=\"header-anchor\" href=\"#添加元素到数组的头部\" aria-hidden=\"true\">#</a> 添加元素到数组的头部</h2>\n<h3 id=\"unshift\"><a class=\"header-anchor\" href=\"#unshift\" aria-hidden=\"true\">#</a> unshift()</h3>\n<h4 id=\"描述：它直接修改原来的数组，而不是创建一个新的数组-2\"><a class=\"header-anchor\" href=\"#描述：它直接修改原来的数组，而不是创建一个新的数组-2\" aria-hidden=\"true\">#</a> 描述：它直接修改原来的数组，而不是创建一个新的数组</h4>\n<h4 id=\"参数：-el-：一个或多个，用逗号隔开-2\"><a class=\"header-anchor\" href=\"#参数：-el-：一个或多个，用逗号隔开-2\" aria-hidden=\"true\">#</a> 参数：[el]：一个或多个，用逗号隔开</h4>\n<h4 id=\"返回值：新数组的长度-2\"><a class=\"header-anchor\" href=\"#返回值：新数组的长度-2\" aria-hidden=\"true\">#</a> 返回值：新数组的长度</h4>\n<hr>\n<h2 id=\"删除数组末尾一个元素\"><a class=\"header-anchor\" href=\"#删除数组末尾一个元素\" aria-hidden=\"true\">#</a> 删除数组末尾一个元素</h2>\n<h3 id=\"pop\"><a class=\"header-anchor\" href=\"#pop\" aria-hidden=\"true\">#</a> pop()</h3>\n<h4 id=\"描述：它直接修改原来的数组，而不是创建一个新的数组-3\"><a class=\"header-anchor\" href=\"#描述：它直接修改原来的数组，而不是创建一个新的数组-3\" aria-hidden=\"true\">#</a> 描述：它直接修改原来的数组，而不是创建一个新的数组</h4>\n<h4 id=\"返回值：返回数组的最后一个元素的值；如果数组是空的，那么-pop-方法将不进行任何操作，返回-undefined-值\"><a class=\"header-anchor\" href=\"#返回值：返回数组的最后一个元素的值；如果数组是空的，那么-pop-方法将不进行任何操作，返回-undefined-值\" aria-hidden=\"true\">#</a> 返回值：返回数组的最后一个元素的值；如果数组是空的，那么 pop() 方法将不进行任何操作，返回 undefined 值</h4>\n<hr>\n<h2 id=\"删除数组头部一个元素\"><a class=\"header-anchor\" href=\"#删除数组头部一个元素\" aria-hidden=\"true\">#</a> 删除数组头部一个元素</h2>\n<h3 id=\"shift\"><a class=\"header-anchor\" href=\"#shift\" aria-hidden=\"true\">#</a> shift()</h3>\n<h4 id=\"描述：它直接修改原来的数组，而不是创建一个新的数组-4\"><a class=\"header-anchor\" href=\"#描述：它直接修改原来的数组，而不是创建一个新的数组-4\" aria-hidden=\"true\">#</a> 描述：它直接修改原来的数组，而不是创建一个新的数组</h4>\n<h4 id=\"返回值：返回数组的第一个元素的值；如果数组是空的，那么-shift-方法将不进行任何操作，返回-undefined-值\"><a class=\"header-anchor\" href=\"#返回值：返回数组的第一个元素的值；如果数组是空的，那么-shift-方法将不进行任何操作，返回-undefined-值\" aria-hidden=\"true\">#</a> 返回值：返回数组的第一个元素的值；如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值</h4>\n<hr>\n<h2 id=\"通过索引删除元素\"><a class=\"header-anchor\" href=\"#通过索引删除元素\" aria-hidden=\"true\">#</a> 通过索引删除元素</h2>\n<h3 id=\"splice\"><a class=\"header-anchor\" href=\"#splice\" aria-hidden=\"true\">#</a> splice()</h3>\n<h4 id=\"描述：1-向数组中添加元素（由第三个参数控制）；2-从数组中删除元素（由第二个参数控制），并返回被删除元素组成的新数组。直接修改原来的数组。\"><a class=\"header-anchor\" href=\"#描述：1-向数组中添加元素（由第三个参数控制）；2-从数组中删除元素（由第二个参数控制），并返回被删除元素组成的新数组。直接修改原来的数组。\" aria-hidden=\"true\">#</a> 描述：1.向数组中添加元素（由第三个参数控制）；2.从数组中删除元素（由第二个参数控制），并返回被删除元素组成的新数组。直接修改原来的数组。</h4>\n<h4 id=\"参数：-index-：要添加或删除元素的位置，必需；-deletenum-：要删除的元素个数，设置为0则不删除，必需；-items-：要添加的元素，不设置则不添加\"><a class=\"header-anchor\" href=\"#参数：-index-：要添加或删除元素的位置，必需；-deletenum-：要删除的元素个数，设置为0则不删除，必需；-items-：要添加的元素，不设置则不添加\" aria-hidden=\"true\">#</a> 参数：[index]：要添加或删除元素的位置，必需；[deleteNum]：要删除的元素个数，设置为0则不删除，必需；[items]：要添加的元素，不设置则不添加</h4>\n<h4 id=\"返回值：返回被删除元素组成的新数组\"><a class=\"header-anchor\" href=\"#返回值：返回被删除元素组成的新数组\" aria-hidden=\"true\">#</a> 返回值：返回被删除元素组成的新数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3]</span>\narr <span class=\"token comment\">// [1, 4, 5]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span>\narr <span class=\"token comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"找出某个元素在数组中对应的索引\"><a class=\"header-anchor\" href=\"#找出某个元素在数组中对应的索引\" aria-hidden=\"true\">#</a> 找出某个元素在数组中对应的索引</h2>\n<h3 id=\"indexof\"><a class=\"header-anchor\" href=\"#indexof\" aria-hidden=\"true\">#</a> indexOf()</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"复制一个数组\"><a class=\"header-anchor\" href=\"#复制一个数组\" aria-hidden=\"true\">#</a> 复制一个数组</h2>\n<h3 id=\"slice\"><a class=\"header-anchor\" href=\"#slice\" aria-hidden=\"true\">#</a> slice()</h3>\n<h4 id=\"描述：可从已有的数组中返回选定的元素（包含start，不包含end）。该方法不会改变原有数组，而是返回一个新数组。\"><a class=\"header-anchor\" href=\"#描述：可从已有的数组中返回选定的元素（包含start，不包含end）。该方法不会改变原有数组，而是返回一个新数组。\" aria-hidden=\"true\">#</a> 描述：可从已有的数组中返回选定的元素（包含start，不包含end）。该方法不会改变原有数组，而是返回一个新数组。</h4>\n<h4 id=\"参数：-strat-：开始选取元素的位置；-end-：结束的位置\"><a class=\"header-anchor\" href=\"#参数：-strat-：开始选取元素的位置；-end-：结束的位置\" aria-hidden=\"true\">#</a> 参数：[strat]：开始选取元素的位置；[end]：结束的位置</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"判断某个变量是否是一个数组对象\"><a class=\"header-anchor\" href=\"#判断某个变量是否是一个数组对象\" aria-hidden=\"true\">#</a> 判断某个变量是否是一个数组对象</h2>\n<h3 id=\"array-isarray\"><a class=\"header-anchor\" href=\"#array-isarray\" aria-hidden=\"true\">#</a> Array.isArray()</h3>\n<h4 id=\"参数：-arr-：要判断的变量\"><a class=\"header-anchor\" href=\"#参数：-arr-：要判断的变量\" aria-hidden=\"true\">#</a> 参数：[arr]：要判断的变量</h4>\n<h4 id=\"返回值：是一个数组对象则返回true，不是则返回false\"><a class=\"header-anchor\" href=\"#返回值：是一个数组对象则返回true，不是则返回false\" aria-hidden=\"true\">#</a> 返回值：是一个数组对象则返回true，不是则返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<p>* mdn建议不要用</p>\n<h2 id=\"浅复制数组的一部分到此数组的另一个位置\"><a class=\"header-anchor\" href=\"#浅复制数组的一部分到此数组的另一个位置\" aria-hidden=\"true\">#</a> 浅复制数组的一部分到此数组的另一个位置</h2>\n<h3 id=\"copywithin\"><a class=\"header-anchor\" href=\"#copywithin\" aria-hidden=\"true\">#</a> *copyWithin()</h3>\n<h4 id=\"参数：-target-：要被复制的数组片段；-start-：要复制的片段的开始位置；-end-：要复制的片段的结束位置\"><a class=\"header-anchor\" href=\"#参数：-target-：要被复制的数组片段；-start-：要复制的片段的开始位置；-end-：要复制的片段的结束位置\" aria-hidden=\"true\">#</a> 参数：[target]：要被复制的数组片段；[start]：要复制的片段的开始位置；[end]：要复制的片段的结束位置</h4>\n<h4 id=\"返回值：改变后的数组\"><a class=\"header-anchor\" href=\"#返回值：改变后的数组\" aria-hidden=\"true\">#</a> 返回值：改变后的数组</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">参数说明</p>\n<p>包含start，不包含end。</p>\n<p>如果target &gt; length ,不拷贝；如果target在start之后，复制的数组片段会被剪切以保证新数组的长度和原数组一样。</p>\n</div>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">this对象说明</p>\n<p>copyWithin方法不要求其this值必须是一个数组对象，也可以是类数组；除此之外，copyWithin是一个可变方法，它可以改变this对象本身，并且返回它，而不仅仅是它的拷贝</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>copyWithin<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {0: 1, 3: 1, length: 5}</span>\n<span class=\"token comment\">// 相当于对this对象（是一个类数组），将这个对象的第3位到最后一位拷贝到了这个对象的第0位</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\" target=\"_blank\" rel=\"noopener noreferrer\">兼容低版本<OutboundLink/></a></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"array对象方法\"><a class=\"header-anchor\" href=\"#array对象方法\" aria-hidden=\"true\">#</a> Array对象方法</h2>\n<h3 id=\"fill\"><a class=\"header-anchor\" href=\"#fill\" aria-hidden=\"true\">#</a> fill()</h3>\n<h4 id=\"描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素\"><a class=\"header-anchor\" href=\"#描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素\" aria-hidden=\"true\">#</a> 描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</h4>\n<h4 id=\"参数：-value-：用来填充的固定值；-start-：填充的起始位置；-end-：填充的结束位置\"><a class=\"header-anchor\" href=\"#参数：-value-：用来填充的固定值；-start-：填充的起始位置；-end-：填充的结束位置\" aria-hidden=\"true\">#</a> 参数：[value]：用来填充的固定值；[start]：填充的起始位置；[end]：填充的结束位置</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。</p>\n<p>fill 方法是个可变方法, 它会改变调用它的 this 对象本身, 然后返回它, 而并不是返回一个副本。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [7, 7, 7]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {0: 2, 1: 2, 2: 2, length: 3}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此处涉及都引用值的地方都需要注意，比如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// (3) [{…}, {…}, {…}]</span>\n                  <span class=\"token comment\">// 0: {}</span>\n                  <span class=\"token comment\">// 1: {}</span>\n                  <span class=\"token comment\">// 2: {}</span>\n                  <span class=\"token comment\">// length: 3</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>djlun <span class=\"token operator\">=</span> <span class=\"token string\">'djlun'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// (3) [{…}, {…}, {…}]</span>\n                  <span class=\"token comment\">// 0: {djlun: \"djlun\"}</span>\n                  <span class=\"token comment\">// 1: {djlun: \"djlun\"}</span>\n                  <span class=\"token comment\">// 2: {djlun: \"djlun\"}</span>\n                  <span class=\"token comment\">// length: 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"reverse\"><a class=\"header-anchor\" href=\"#reverse\" aria-hidden=\"true\">#</a> reverse()</h3>\n<h4 id=\"描述：将数组中元素的位置颠倒，并返回该数组的引用\"><a class=\"header-anchor\" href=\"#描述：将数组中元素的位置颠倒，并返回该数组的引用\" aria-hidden=\"true\">#</a> 描述：将数组中元素的位置颠倒，并返回该数组的引用</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 2, 1]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"sort\"><a class=\"header-anchor\" href=\"#sort\" aria-hidden=\"true\">#</a> sort()</h3>\n<h4 id=\"描述：用原地算法对数组的元素进行排序，并返回数组\"><a class=\"header-anchor\" href=\"#描述：用原地算法对数组的元素进行排序，并返回数组\" aria-hidden=\"true\">#</a> 描述：用原地算法对数组的元素进行排序，并返回数组</h4>\n<h4 id=\"参数：-comparefn-：用来指定按某种顺序进行排序的函数。如果省略，元素按照转换为的字符串的各个字符的unicode位点进行排序。\"><a class=\"header-anchor\" href=\"#参数：-comparefn-：用来指定按某种顺序进行排序的函数。如果省略，元素按照转换为的字符串的各个字符的unicode位点进行排序。\" aria-hidden=\"true\">#</a> 参数：[compareFn]：用来指定按某种顺序进行排序的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。</h4>\n<h4 id=\"comparefn的参数：-a，b-：用来参与比较的两个参数，根据返回值进行排序\"><a class=\"header-anchor\" href=\"#comparefn的参数：-a，b-：用来参与比较的两个参数，根据返回值进行排序\" aria-hidden=\"true\">#</a> compareFn的参数：[a，b]：用来参与比较的两个参数，根据返回值进行排序</h4>\n<h4 id=\"comparefn的返回值：返回值小于0，则a在b前面；返回值等于0，a、b位置不变；返回值大于0，则b在a前面\"><a class=\"header-anchor\" href=\"#comparefn的返回值：返回值小于0，则a在b前面；返回值等于0，a、b位置不变；返回值大于0，则b在a前面\" aria-hidden=\"true\">#</a> compareFn的返回值：返回值小于0，则a在b前面；返回值等于0，a、b位置不变；返回值大于0，则b在a前面</h4>\n<h4 id=\"返回值：返回排序后的新数组\"><a class=\"header-anchor\" href=\"#返回值：返回排序后的新数组\" aria-hidden=\"true\">#</a> 返回值：返回排序后的新数组</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>要改变思维，不止数字能排序，字符串也能排序，对象也能根据其中的某个元素进行排序</p>\n</div>\n<p>升序：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2,3,3,5,5,9]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener noreferrer\">mdn关于排序的更多说明<OutboundLink/></a></p>\n<hr>\n<h3 id=\"concat\"><a class=\"header-anchor\" href=\"#concat\" aria-hidden=\"true\">#</a> concat()</h3>\n<h4 id=\"描述：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\"><a class=\"header-anchor\" href=\"#描述：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\" aria-hidden=\"true\">#</a> 描述：用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</h4>\n<h4 id=\"参数：-arr-：要合并的一个或多个数组\"><a class=\"header-anchor\" href=\"#参数：-arr-：要合并的一个或多个数组\" aria-hidden=\"true\">#</a> 参数：[arr]：要合并的一个或多个数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['1', '2', '3']</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['1', 'a']</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"slice-2\"><a class=\"header-anchor\" href=\"#slice-2\" aria-hidden=\"true\">#</a> slice()</h3>\n<h4 id=\"描述：返回一个新的数组对象，这一对象是一个由-start和-end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。\"><a class=\"header-anchor\" href=\"#描述：返回一个新的数组对象，这一对象是一个由-start和-end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。\" aria-hidden=\"true\">#</a> 描述：返回一个新的数组对象，这一对象是一个由 start和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。</h4>\n<h4 id=\"参数：-start-：开始拷贝的位置，-end-：结束拷贝的位置\"><a class=\"header-anchor\" href=\"#参数：-start-：开始拷贝的位置，-end-：结束拷贝的位置\" aria-hidden=\"true\">#</a> 参数：[start]：开始拷贝的位置，[end]：结束拷贝的位置</h4>\n<h4 id=\"返回值：一个新数组\"><a class=\"header-anchor\" href=\"#返回值：一个新数组\" aria-hidden=\"true\">#</a> 返回值：一个新数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,4]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"join\"><a class=\"header-anchor\" href=\"#join\" aria-hidden=\"true\">#</a> join()</h3>\n<h4 id=\"描述：将一个数组（或一个类数组对象）的所有元素连接成一个字符串，并返回这个字符串，不会改变原数组\"><a class=\"header-anchor\" href=\"#描述：将一个数组（或一个类数组对象）的所有元素连接成一个字符串，并返回这个字符串，不会改变原数组\" aria-hidden=\"true\">#</a> 描述：将一个数组（或一个类数组对象）的所有元素连接成一个字符串，并返回这个字符串，不会改变原数组</h4>\n<h4 id=\"参数：-separator-：分隔符号，默认是逗号（，）\"><a class=\"header-anchor\" href=\"#参数：-separator-：分隔符号，默认是逗号（，）\" aria-hidden=\"true\">#</a> 参数：[separator]：分隔符号，默认是逗号（，）</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.2.3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"tostring\"><a class=\"header-anchor\" href=\"#tostring\" aria-hidden=\"true\">#</a> toString()</h3>\n<h4 id=\"描述：将数组转化为字符串\"><a class=\"header-anchor\" href=\"#描述：将数组转化为字符串\" aria-hidden=\"true\">#</a> 描述：将数组转化为字符串</h4>\n<h4 id=\"\"><a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">#</a> </h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object object],[object object]</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"tolocalestring\"><a class=\"header-anchor\" href=\"#tolocalestring\" aria-hidden=\"true\">#</a> toLocaleString()</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\" target=\"_blank\" rel=\"noopener noreferrer\">mdn通道<OutboundLink/></a></p>\n<hr>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener noreferrer\">不要尝试在遍历过程中对原数组进行任何修改<OutboundLink/></a></p>\n</div>\n<hr>\n<h3 id=\"foreach-2\"><a class=\"header-anchor\" href=\"#foreach-2\" aria-hidden=\"true\">#</a> forEach()</h3>\n<h4 id=\"描述：遍历用\"><a class=\"header-anchor\" href=\"#描述：遍历用\" aria-hidden=\"true\">#</a> 描述：遍历用</h4>\n<h4 id=\"参数：和其他类型的参数一样\"><a class=\"header-anchor\" href=\"#参数：和其他类型的参数一样\" aria-hidden=\"true\">#</a> 参数：和其他类型的参数一样</h4>\n<p>它返回undefined，map()方法返回一个新数组</p>\n<hr>\n<h3 id=\"find\"><a class=\"header-anchor\" href=\"#find\" aria-hidden=\"true\">#</a> find()</h3>\n<h4 id=\"描述：返回数组中-满足提供的测试函数的-第一个元素-的-值\"><a class=\"header-anchor\" href=\"#描述：返回数组中-满足提供的测试函数的-第一个元素-的-值\" aria-hidden=\"true\">#</a> 描述：返回数组中 满足提供的测试函数的 第一个元素 的 <em>值</em></h4>\n<h4 id=\"参数：-fn-：测试函数；-thisarg-：设置指定的this对象\"><a class=\"header-anchor\" href=\"#参数：-fn-：测试函数；-thisarg-：设置指定的this对象\" aria-hidden=\"true\">#</a> 参数：[Fn]：测试函数；[thisArg]：设置指定的this对象</h4>\n<h4 id=\"函数参数：-el-；-index-；-arr\"><a class=\"header-anchor\" href=\"#函数参数：-el-；-index-；-arr\" aria-hidden=\"true\">#</a> 函数参数：[el]；[index]；[arr]</h4>\n<h4 id=\"返回值：找到返回值，否则返回undefined\"><a class=\"header-anchor\" href=\"#返回值：找到返回值，否则返回undefined\" aria-hidden=\"true\">#</a> 返回值：找到返回值，否则返回undefined</h4>\n<hr>\n<h3 id=\"findindex\"><a class=\"header-anchor\" href=\"#findindex\" aria-hidden=\"true\">#</a> findIndex()</h3>\n<h4 id=\"描述：返回数组中-满足提供的测试函数的-第一个元素-的-索引\"><a class=\"header-anchor\" href=\"#描述：返回数组中-满足提供的测试函数的-第一个元素-的-索引\" aria-hidden=\"true\">#</a> 描述：返回数组中 满足提供的测试函数的 第一个元素 的 <em>索引</em></h4>\n<h4 id=\"参数：-fn-：测试函数；-thisarg-：设置指定的this对象-2\"><a class=\"header-anchor\" href=\"#参数：-fn-：测试函数；-thisarg-：设置指定的this对象-2\" aria-hidden=\"true\">#</a> 参数：[Fn]：测试函数；[thisArg]：设置指定的this对象</h4>\n<h4 id=\"函数参数：-el-；-index-；-arr-2\"><a class=\"header-anchor\" href=\"#函数参数：-el-；-index-；-arr-2\" aria-hidden=\"true\">#</a> 函数参数：[el]；[index]；[arr]</h4>\n<h4 id=\"返回值：找到返回索引，否则返回-1\"><a class=\"header-anchor\" href=\"#返回值：找到返回索引，否则返回-1\" aria-hidden=\"true\">#</a> 返回值：找到返回索引，否则返回-1</h4>\n<hr>\n<h3 id=\"includes\"><a class=\"header-anchor\" href=\"#includes\" aria-hidden=\"true\">#</a> *includes()</h3>\n<h4 id=\"描述：用来查找一个数组是否包含一个指定的值\"><a class=\"header-anchor\" href=\"#描述：用来查找一个数组是否包含一个指定的值\" aria-hidden=\"true\">#</a> 描述：用来查找一个数组是否包含一个指定的值</h4>\n<h4 id=\"参数：-searchel-：要查找的元素；-start-：开始查找的位置\"><a class=\"header-anchor\" href=\"#参数：-searchel-：要查找的元素；-start-：开始查找的位置\" aria-hidden=\"true\">#</a> 参数：[searchEl]：要查找的元素；[start]：开始查找的位置</h4>\n<h4 id=\"返回值：包含返回true，不包含返回false\"><a class=\"header-anchor\" href=\"#返回值：包含返回true，不包含返回false\" aria-hidden=\"true\">#</a> 返回值：包含返回true，不包含返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>includes() 方法有意设计为通用方法。它不要求this值是数组对象，所以它可以被用于其他类型的对象 (比如类数组对象)</p>\n</div>\n<p>低版本兼容：看mdn的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener noreferrer\">例子<OutboundLink/></a></p>\n<hr>\n<h3 id=\"indexof-2\"><a class=\"header-anchor\" href=\"#indexof-2\" aria-hidden=\"true\">#</a> indexOf()</h3>\n<h4 id=\"描述：查找指定元素，返回找到的第一个指定元素的索引\"><a class=\"header-anchor\" href=\"#描述：查找指定元素，返回找到的第一个指定元素的索引\" aria-hidden=\"true\">#</a> 描述：查找指定元素，返回找到的第一个指定元素的索引</h4>\n<h4 id=\"参数：-searchel-：要查找的元素；-start-：开始查找的位置-2\"><a class=\"header-anchor\" href=\"#参数：-searchel-：要查找的元素；-start-：开始查找的位置-2\" aria-hidden=\"true\">#</a> 参数：[searchEl]：要查找的元素；[start]：开始查找的位置</h4>\n<h4 id=\"返回值：找到返回第一个索引，没找到返回-1\"><a class=\"header-anchor\" href=\"#返回值：找到返回第一个索引，没找到返回-1\" aria-hidden=\"true\">#</a> 返回值：找到返回第一个索引，没找到返回-1</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"lastindexof\"><a class=\"header-anchor\" href=\"#lastindexof\" aria-hidden=\"true\">#</a> lastIndexOf()</h3>\n<h4 id=\"描述：从数组的最后查找指定元素\"><a class=\"header-anchor\" href=\"#描述：从数组的最后查找指定元素\" aria-hidden=\"true\">#</a> 描述：从数组的最后查找指定元素</h4>\n<h4 id=\"参数：-searchel-：要查找的元素；-start-：开始查找的位置，从这往前查找\"><a class=\"header-anchor\" href=\"#参数：-searchel-：要查找的元素；-start-：开始查找的位置，从这往前查找\" aria-hidden=\"true\">#</a> 参数：[searchEl]：要查找的元素；[start]：开始查找的位置，从这往前查找</h4>\n<h4 id=\"返回值：找到返回第一个索引，没找到返回-1-2\"><a class=\"header-anchor\" href=\"#返回值：找到返回第一个索引，没找到返回-1-2\" aria-hidden=\"true\">#</a> 返回值：找到返回第一个索引，没找到返回-1</h4>\n<hr>\n<h3 id=\"map-2\"><a class=\"header-anchor\" href=\"#map-2\" aria-hidden=\"true\">#</a> map()</h3>\n<h4 id=\"描述：遍历用-2\"><a class=\"header-anchor\" href=\"#描述：遍历用-2\" aria-hidden=\"true\">#</a> 描述：遍历用</h4>\n<h4 id=\"参数：和foreach的参数一样\"><a class=\"header-anchor\" href=\"#参数：和foreach的参数一样\" aria-hidden=\"true\">#</a> 参数：和forEach的参数一样</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> newarr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>el<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> el\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newarr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (5) [\"a\", \"b\", \"c\", \"d\", \"e\"]</span>\n\n<span class=\"token comment\">// a 0 a,b,c,d,e</span>\n<span class=\"token comment\">// b 1 a,b,c,d,e</span>\n<span class=\"token comment\">// c 2 a,b,c,d,e</span>\n<span class=\"token comment\">// d 3 a,b,c,d,e</span>\n<span class=\"token comment\">// e 4 a,b,c,d,e</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 求数组的每个元素的平方根</span>\n<span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> roots <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener noreferrer\">兼容低版本<OutboundLink/></a></p>\n<hr>\n<h3 id=\"reduce\"><a class=\"header-anchor\" href=\"#reduce\" aria-hidden=\"true\">#</a> reduce()</h3>\n<h4 id=\"描述：对数组中的每个元素执行一个提供的reducer函数-升序执行-，将其结果汇总为单个返回值\"><a class=\"header-anchor\" href=\"#描述：对数组中的每个元素执行一个提供的reducer函数-升序执行-，将其结果汇总为单个返回值\" aria-hidden=\"true\">#</a> 描述：对数组中的每个元素执行一个提供的reducer函数(升序执行)，将其结果汇总为单个返回值</h4>\n<h4 id=\"参数：-fn-：提供的函数；-initialvalue-：作为第一次调用提供的函数时的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。-在没有初始值的空数组上调用-reduce-将报错。\"><a class=\"header-anchor\" href=\"#参数：-fn-：提供的函数；-initialvalue-：作为第一次调用提供的函数时的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。-在没有初始值的空数组上调用-reduce-将报错。\" aria-hidden=\"true\">#</a> 参数：[Fn]：提供的函数；[initialValue]：作为第一次调用提供的函数时的第一个参数的值。如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</h4>\n<h4 id=\"函数参数：-accumulator-：上一次调用回调时返回的累积值，或initialvalue；-currentvalue-：数组中正在被处理的元素；-currentindex-：数组中正在被处理的元素的索引；-arr-：数组\"><a class=\"header-anchor\" href=\"#函数参数：-accumulator-：上一次调用回调时返回的累积值，或initialvalue；-currentvalue-：数组中正在被处理的元素；-currentindex-：数组中正在被处理的元素的索引；-arr-：数组\" aria-hidden=\"true\">#</a> 函数参数：[accumulator]：上一次调用回调时返回的累积值，或initialValue；[currentValue]：数组中正在被处理的元素；[currentIndex]：数组中正在被处理的元素的索引；[arr]：数组</h4>\n<h4 id=\"返回值：返回函数累计处理的结果\"><a class=\"header-anchor\" href=\"#返回值：返回函数累计处理的结果\" aria-hidden=\"true\">#</a> 返回值：返回函数累计处理的结果</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> curEl<span class=\"token punctuation\">,</span> curIn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>curEl<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>curIn<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> ac <span class=\"token operator\">+</span> curEl\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 33</span>\n<span class=\"token number\">10</span>         <span class=\"token number\">8</span>  <span class=\"token number\">1</span>\nundefined  <span class=\"token number\">6</span>  <span class=\"token number\">2</span>\nundefined  <span class=\"token number\">5</span>  <span class=\"token number\">3</span>\nundefined  <span class=\"token number\">4</span>  <span class=\"token number\">4</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener noreferrer\">reduce()的一些详细例子<OutboundLink/></a></p>\n<hr>\n<h3 id=\"reduce-的应用：\"><a class=\"header-anchor\" href=\"#reduce-的应用：\" aria-hidden=\"true\">#</a> reduce()的应用：</h3>\n<h3 id=\"累加对象数组里的值\"><a class=\"header-anchor\" href=\"#累加对象数组里的值\" aria-hidden=\"true\">#</a> 累加对象数组里的值</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arrSum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> curEl<span class=\"token punctuation\">,</span> curIn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> ac<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> curEl<span class=\"token punctuation\">.</span>x\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrSum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 30</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"将二维数组转化为一维\"><a class=\"header-anchor\" href=\"#将二维数组转化为一维\" aria-hidden=\"true\">#</a> 将二维数组转化为一维</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> curEl<span class=\"token punctuation\">,</span> curIn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>curEl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,23,4,3,4,5]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"计算数组中每个元素出现的次数\"><a class=\"header-anchor\" href=\"#计算数组中每个元素出现的次数\" aria-hidden=\"true\">#</a> 计算数组中每个元素出现的次数</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token keyword\">in</span> ac<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ac<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ac<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ac\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {a: 3, b: 2, c: 1}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"按属性对object分类\"><a class=\"header-anchor\" href=\"#按属性对object分类\" aria-hidden=\"true\">#</a> 按属性对Object分类</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">groupBy</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newKey <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ac<span class=\"token punctuation\">[</span>newKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ac<span class=\"token punctuation\">[</span>newKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    ac<span class=\"token punctuation\">[</span>newKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ac\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'zwenj'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'dylan'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'lj'</span><span class=\"token punctuation\">,</span>    age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'zpyan'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {18: Array(2), 22: Array(1), 23: Array(1), 24: Array(1)}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{…}, {…}]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"把一个对象数组-中的对象-中的数组的元素-拎出来，存到一个数组中\"><a class=\"header-anchor\" href=\"#把一个对象数组-中的对象-中的数组的元素-拎出来，存到一个数组中\" aria-hidden=\"true\">#</a> 把一个对象数组 中的对象 中的数组的元素 拎出来，存到一个数组中</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'嘉兴图书馆'</span><span class=\"token punctuation\">,</span>\n    books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'book1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book3'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'平湖图书馆'</span><span class=\"token punctuation\">,</span>\n    books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'book4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book6'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'海盐图书馆'</span><span class=\"token punctuation\">,</span>\n    books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'book7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book9'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'嘉善图书馆'</span><span class=\"token punctuation\">,</span>\n    books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'book10'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'book12'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>ac<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>cur<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (12) [\"book1\", \"book2\", \"book3\", \"book4\", \"book5\", \"book6\", \"book7\", \"book8\", \"book9\", \"book10\", \"book11\", \"book12\"]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"数组去重\"><a class=\"header-anchor\" href=\"#数组去重\" aria-hidden=\"true\">#</a> 数组去重</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> ac<span class=\"token punctuation\">[</span>ac<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ac<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ac\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (6) [1, 2, 3, 4, 6, 9]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"按顺序运行promise\"><a class=\"header-anchor\" href=\"#按顺序运行promise\" aria-hidden=\"true\">#</a> 按顺序运行Promise</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener noreferrer\">了解完promise再看<OutboundLink/></a></p>\n<hr>\n<h3 id=\"功能型函数管道\"><a class=\"header-anchor\" href=\"#功能型函数管道\" aria-hidden=\"true\">#</a> 功能型函数管道</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">triple</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">quadruple</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// const pipe = (...functions) => input => functions.reduce(</span>\n<span class=\"token comment\">//   (acc, fn) => fn(acc),</span>\n<span class=\"token comment\">//   input</span>\n<span class=\"token comment\">// );</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>functions<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">return</span> input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> functions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> multiply6 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply9 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>triple<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply16 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>quadruple<span class=\"token punctuation\">,</span> quadruple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> multiply24 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">,</span> quadruple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">multiply6</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">multiply9</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">multiply16</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result4 <span class=\"token operator\">=</span> <span class=\"token function\">multiply24</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 36</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 81</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 256</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result4<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 240</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面的代码编写风格不太习惯，以下是用自己的代码风格写的：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">triple</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> x\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">quadra</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> x\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">penta</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> x\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Pipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">cur</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>double<span class=\"token punctuation\">,</span> triple<span class=\"token punctuation\">,</span> quadra<span class=\"token punctuation\">,</span> penta<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> dtqp <span class=\"token operator\">=</span> <span class=\"token function\">Pipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>fns<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">dtqp</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 240</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"reduceright\"><a class=\"header-anchor\" href=\"#reduceright\" aria-hidden=\"true\">#</a> reduceRight()</h3>\n<p>与reduce()的区别：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> left  <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"12345\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"54321\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"entries-3\"><a class=\"header-anchor\" href=\"#entries-3\" aria-hidden=\"true\">#</a> entries()</h3>\n<h4 id=\"描述：返回一个新的array-iterator对象，该对象包含数组中每个索引的键-值对\"><a class=\"header-anchor\" href=\"#描述：返回一个新的array-iterator对象，该对象包含数组中每个索引的键-值对\" aria-hidden=\"true\">#</a> 描述：返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对</h4>\n<hr>\n<h3 id=\"keys-3\"><a class=\"header-anchor\" href=\"#keys-3\" aria-hidden=\"true\">#</a> keys()</h3>\n<h4 id=\"描述：返回一个包含数组中每个-索引键-的array-iterator对象\"><a class=\"header-anchor\" href=\"#描述：返回一个包含数组中每个-索引键-的array-iterator对象\" aria-hidden=\"true\">#</a> 描述：返回一个包含数组中每个 索引键 的Array Iterator对象</h4>\n<hr>\n<h3 id=\"values-3\"><a class=\"header-anchor\" href=\"#values-3\" aria-hidden=\"true\">#</a> values()</h3>\n<h4 id=\"描述：返回一个新的-array-iterator-对象，该对象包含数组每个-索引的值\"><a class=\"header-anchor\" href=\"#描述：返回一个新的-array-iterator-对象，该对象包含数组每个-索引的值\" aria-hidden=\"true\">#</a> 描述：返回一个新的 Array Iterator 对象，该对象包含数组每个 索引的值</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 迭代方法1</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> eArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> letter <span class=\"token keyword\">of</span> eArr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// w    y    k    o   p</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 迭代方法2</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> eArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eArr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// w</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eArr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eArr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// k</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eArr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eArr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"every\"><a class=\"header-anchor\" href=\"#every\" aria-hidden=\"true\">#</a> every()</h3>\n<h4 id=\"描述：检测数组中的所有元素是不是否符合指定函数\"><a class=\"header-anchor\" href=\"#描述：检测数组中的所有元素是不是否符合指定函数\" aria-hidden=\"true\">#</a> 描述：检测数组中的所有元素是不是否符合指定函数</h4>\n<h4 id=\"参数：-fn-：指定函数；-thisarg-：指定this指向的对象\"><a class=\"header-anchor\" href=\"#参数：-fn-：指定函数；-thisarg-：指定this指向的对象\" aria-hidden=\"true\">#</a> 参数：[Fn]：指定函数；[thisArg]：指定this指向的对象</h4>\n<h4 id=\"fn参数：-el-index-arr\"><a class=\"header-anchor\" href=\"#fn参数：-el-index-arr\" aria-hidden=\"true\">#</a> Fn参数：[el];[index];[arr]</h4>\n<h4 id=\"返回值：当所有的元素都符合条件返回true，否则返回false。空数组调用此方法也返回true\"><a class=\"header-anchor\" href=\"#返回值：当所有的元素都符合条件返回true，否则返回false。空数组调用此方法也返回true\" aria-hidden=\"true\">#</a> 返回值：当所有的元素都符合条件返回true，否则返回false。空数组调用此方法也返回true</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every\" target=\"_blank\" rel=\"noopener noreferrer\">低版本兼容<OutboundLink/></a></p>\n<hr>\n<h3 id=\"some\"><a class=\"header-anchor\" href=\"#some\" aria-hidden=\"true\">#</a> some()</h3>\n<h4 id=\"描述：检测数组中是否有一个元素符合指定函数\"><a class=\"header-anchor\" href=\"#描述：检测数组中是否有一个元素符合指定函数\" aria-hidden=\"true\">#</a> 描述：检测数组中是否有一个元素符合指定函数</h4>\n<h4 id=\"参数：-fn-：指定函数；-thisarg-：指定this指向的对象-2\"><a class=\"header-anchor\" href=\"#参数：-fn-：指定函数；-thisarg-：指定this指向的对象-2\" aria-hidden=\"true\">#</a> 参数：[Fn]：指定函数；[thisArg]：指定this指向的对象</h4>\n<h4 id=\"fn参数：-el-index-arr-2\"><a class=\"header-anchor\" href=\"#fn参数：-el-index-arr-2\" aria-hidden=\"true\">#</a> Fn参数：[el];[index];[arr]</h4>\n<h4 id=\"返回值：有一个元素满足指定函数则返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：有一个元素满足指定函数则返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：有一个元素满足指定函数则返回true，否则返回false</h4>\n<hr>\n<h3 id=\"filter\"><a class=\"header-anchor\" href=\"#filter\" aria-hidden=\"true\">#</a> filter()</h3>\n<h4 id=\"描述：通过指定函数过滤数组中的元素\"><a class=\"header-anchor\" href=\"#描述：通过指定函数过滤数组中的元素\" aria-hidden=\"true\">#</a> 描述：通过指定函数过滤数组中的元素</h4>\n<h4 id=\"参数：-fn-：指定函数；-thisarg-：指定this指向的对象-3\"><a class=\"header-anchor\" href=\"#参数：-fn-：指定函数；-thisarg-：指定this指向的对象-3\" aria-hidden=\"true\">#</a> 参数：[Fn]：指定函数；[thisArg]：指定this指向的对象</h4>\n<h4 id=\"fn参数：-el-index-arr-3\"><a class=\"header-anchor\" href=\"#fn参数：-el-index-arr-3\" aria-hidden=\"true\">#</a> Fn参数：[el];[index];[arr]</h4>\n<h4 id=\"返回值：一个新数组，由指定函数过滤而成。当指定参数返回true的时候算是过滤成功。\"><a class=\"header-anchor\" href=\"#返回值：一个新数组，由指定函数过滤而成。当指定参数返回true的时候算是过滤成功。\" aria-hidden=\"true\">#</a> 返回值：一个新数组，由指定函数过滤而成。当指定参数返回true的时候算是过滤成功。</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 5]</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> el <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4, 6, 7]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"es6\"><a class=\"header-anchor\" href=\"#es6\" aria-hidden=\"true\">#</a> ES6</h2>\n<h3 id=\"扩展运算符（-）\"><a class=\"header-anchor\" href=\"#扩展运算符（-）\" aria-hidden=\"true\">#</a> 扩展运算符（...）</h3>\n<h4 id=\"描述：看起来像是对数组进行了遍历，但是跟遍历没有关系。不能对类似遍历出来的单个对象进行某些操作，只能进行批量传递。直观一点的说法就是去掉了它外面那个-。用于函数调用的时候传参，参数进来后不用进行for循环？这看起来像是它的简单的作用\"><a class=\"header-anchor\" href=\"#描述：看起来像是对数组进行了遍历，但是跟遍历没有关系。不能对类似遍历出来的单个对象进行某些操作，只能进行批量传递。直观一点的说法就是去掉了它外面那个-。用于函数调用的时候传参，参数进来后不用进行for循环？这看起来像是它的简单的作用\" aria-hidden=\"true\">#</a> 描述：看起来像是对数组进行了遍历，但是跟遍历没有关系。不能对类似遍历出来的单个对象进行某些操作，只能进行批量传递。直观一点的说法就是去掉了它外面那个[]。用于函数调用的时候传参，参数进来后不用进行for循环？这看起来像是它的简单的作用</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 2 3</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n                      <span class=\"token comment\">// 2</span>\n                      <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}