{"remainingRequest":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\github\\start-vuepress\\docs\\jsdoc\\object.md?vue&type=template&id=295b8d08&","dependencies":[{"path":"E:\\github\\start-vuepress\\docs\\jsdoc\\object.md","mtime":1548125000375},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"对象\"><a class=\"header-anchor\" href=\"#对象\" aria-hidden=\"true\">#</a> 对象</h1>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener noreferrer\">文档<OutboundLink/></a>需要多看几遍</p>\n<h2 id=\"方法\"><a class=\"header-anchor\" href=\"#方法\" aria-hidden=\"true\">#</a> 方法</h2>\n<h3 id=\"object-create\"><a class=\"header-anchor\" href=\"#object-create\" aria-hidden=\"true\">#</a> Object.create()</h3>\n<h4 id=\"描述：创建一个新对象\"><a class=\"header-anchor\" href=\"#描述：创建一个新对象\" aria-hidden=\"true\">#</a> 描述：创建一个新对象</h4>\n<h4 id=\"参数：-proto-：新创建的对象的原型（proto）；-propertiesobject-：不明\"><a class=\"header-anchor\" href=\"#参数：-proto-：新创建的对象的原型（proto）；-propertiesobject-：不明\" aria-hidden=\"true\">#</a> 参数：[proto]：新创建的对象的原型（<strong>proto</strong>）；[propertiesObject]：不明</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n                <span class=\"token comment\">//  __proto__:</span>\n                <span class=\"token comment\">//    name: \"djlun\"</span>\n                <span class=\"token comment\">//    __proto__: Object</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// {}</span>\n              <span class=\"token comment\">//   __proto__: Object</span>\n等同于：\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n                                          <span class=\"token comment\">//   __proto__: Object</span>\n区别于：\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n                              <span class=\"token comment\">//   No properties</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"用-object-create实现类式继承\"><a class=\"header-anchor\" href=\"#用-object-create实现类式继承\" aria-hidden=\"true\">#</a> 用 Object.create实现类式继承</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener noreferrer\">这里<OutboundLink/></a></p>\n<hr>\n<h3 id=\"object-assign\"><a class=\"header-anchor\" href=\"#object-assign\" aria-hidden=\"true\">#</a> Object.assign()</h3>\n<h4 id=\"描述：用于将所有可枚举属性的值从一个或多个源对象复制到目标对象\"><a class=\"header-anchor\" href=\"#描述：用于将所有可枚举属性的值从一个或多个源对象复制到目标对象\" aria-hidden=\"true\">#</a> 描述：用于将所有可枚举属性的值从一个或多个源对象复制到目标对象</h4>\n<h4 id=\"参数：-target-：目标对象，一个；-source-：源对象，一个或多个\"><a class=\"header-anchor\" href=\"#参数：-target-：目标对象，一个；-source-：源对象，一个或多个\" aria-hidden=\"true\">#</a> 参数：[target]：目标对象，一个；[source]：源对象，一个或多个</h4>\n<h4 id=\"返回值：返回目标对象\"><a class=\"header-anchor\" href=\"#返回值：返回目标对象\" aria-hidden=\"true\">#</a> 返回值：返回目标对象</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>sex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">:</span> <span class=\"token string\">'pinghu'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {name: \"djlun\", age: 24, sex: 0, school: \"pinghu\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {name: \"djlun\", age: 24, sex: 0, school: \"pinghu\"}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果某个源对象是不可枚举的，则会略过这个源对象，比如数值类型的源对象。</p>\n<p>原始类型会被包装，null 和 undefined 会被忽略。只有字符串的包装对象才可能有自身可枚举属性。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {name: \"djlun\", age: 18}</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {0: \"s\", 1: \"t\", 2: \"r\", name: \"djlun\", age: 18}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"复制一个对象\"><a class=\"header-anchor\" href=\"#复制一个对象\" aria-hidden=\"true\">#</a> 复制一个对象</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>school<span class=\"token punctuation\">:</span> <span class=\"token string\">'pinghu'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'201'</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> copy <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\nobj<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>school <span class=\"token operator\">=</span> <span class=\"token string\">'lindai'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {</span>\n                  <span class=\"token comment\">//   age: 24</span>\n                  <span class=\"token comment\">//   info: {school: \"lindai\", class: \"201\"}</span>\n                  <span class=\"token comment\">//   name: \"djlun\"</span>\n                  <span class=\"token comment\">// }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {</span>\n                  <span class=\"token comment\">//   age: 18</span>\n                  <span class=\"token comment\">//   info: {school: \"lindai\", class: \"201\"}</span>\n                  <span class=\"token comment\">//   name: \"djlun\"</span>\n                  <span class=\"token comment\">// }</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>引用值改变时，obj和copy会一起改变</p>\n<hr>\n<h3 id=\"深拷贝\"><a class=\"header-anchor\" href=\"#深拷贝\" aria-hidden=\"true\">#</a> 深拷贝</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> copy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'zwenj'</span>\nobj<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {</span>\n                  <span class=\"token comment\">//   info: {age: 18, sex: 0}</span>\n                  <span class=\"token comment\">//   name: \"zwenj\"</span>\n                  <span class=\"token comment\">// }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {</span>\n                  <span class=\"token comment\">//   info: {age: 24, sex: 0}</span>\n                  <span class=\"token comment\">//   name: \"djlun\"</span>\n                  <span class=\"token comment\">// }</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"拷贝访问器\"><a class=\"header-anchor\" href=\"#拷贝访问器\" aria-hidden=\"true\">#</a> 拷贝访问器</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener noreferrer\">拉到最下面<OutboundLink/></a></p>\n<hr>\n<h3 id=\"object-defineproperty\"><a class=\"header-anchor\" href=\"#object-defineproperty\" aria-hidden=\"true\">#</a> Object.defineProperty()</h3>\n<h4 id=\"描述：在指定对象上定义-修改一个属性\"><a class=\"header-anchor\" href=\"#描述：在指定对象上定义-修改一个属性\" aria-hidden=\"true\">#</a> 描述：在指定对象上定义/修改一个属性</h4>\n<h4 id=\"参数：-obj-：指定对象；-prop-：要定义-修改的属性的名称；-des-：要被定义-修改的属性描述符-具体用法看例子\"><a class=\"header-anchor\" href=\"#参数：-obj-：指定对象；-prop-：要定义-修改的属性的名称；-des-：要被定义-修改的属性描述符-具体用法看例子\" aria-hidden=\"true\">#</a> 参数：[obj]：指定对象；[prop]：要定义/修改的属性的名称；[des]：要被定义/修改的属性描述符(具体用法看例子)</h4>\n<h4 id=\"返回值：返回修改后的obj\"><a class=\"header-anchor\" href=\"#返回值：返回修改后的obj\" aria-hidden=\"true\">#</a> 返回值：返回修改后的obj</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>默认情况下，使用 Object.defineProperty() 添加的属性值是不可修改的。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有继承的属性</span>\n<span class=\"token comment\">// 默认没有 enumerable，没有 configurable，没有 writable</span>\n<span class=\"token keyword\">let</span> descriptor2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ndescriptor<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">;</span>\ndescriptor2<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'djlun'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {key: \"static\"}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> descriptor2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {key: \"static\", name: \"djlun\"}</span>\nobj<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'kay'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {key: \"static\", name: \"djlun\"}   !!!注意，没变</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"什么是属性描述符？\"><a class=\"header-anchor\" href=\"#什么是属性描述符？\" aria-hidden=\"true\">#</a> 什么是属性描述符？</h3>\n<p>在 Javascript 中， 属性 由一个字符串类型的“名字”（name）和一个“属性描述符”（property descriptor）对象构成。更多关于属性描述符类型以及他们属性的信息可以查看：Object.defineProperty.</p>\n<p>一个属性描述符是一个记录，由下面属性当中的某些组成的：</p>\n<ul>\n<li>value 该属性的值(仅针对数据属性描述符有效)</li>\n<li>writable 当且仅当属性的值可以被改变时为true。(仅针对数据属性描述有效)</li>\n<li>get 获取该属性的访问器函数（getter）。如果没有访问器， 该值为undefined。(仅针对包含访问器或设置器的属性描述有效)</li>\n<li>set 获取该属性的设置器函数（setter）。 如果没有设置器， 该值为undefined。(仅针对包含访问器或设置器的属性描述有效)</li>\n<li>configurable 当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为true。</li>\n<li>enumerable 当且仅当指定对象的属性可以被枚举出时，为 true。</li>\n</ul>\n<hr>\n<h3 id=\"object-defineproperties\"><a class=\"header-anchor\" href=\"#object-defineproperties\" aria-hidden=\"true\">#</a> Object.defineProperties()</h3>\n<h4 id=\"描述：直接在一个对象上定义新的属性或修改现有属性，并返回该对象\"><a class=\"header-anchor\" href=\"#描述：直接在一个对象上定义新的属性或修改现有属性，并返回该对象\" aria-hidden=\"true\">#</a> 描述：直接在一个对象上定义新的属性或修改现有属性，并返回该对象</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\" target=\"_blank\" rel=\"noopener noreferrer\">参数<OutboundLink/></a></p>\n<hr>\n<h3 id=\"object-entries\"><a class=\"header-anchor\" href=\"#object-entries\" aria-hidden=\"true\">#</a> Object.entries()</h3>\n<h4 id=\"描述：返回一个给定对象自身可枚举属性的键值对数组\"><a class=\"header-anchor\" href=\"#描述：返回一个给定对象自身可枚举属性的键值对数组\" aria-hidden=\"true\">#</a> 描述：返回一个给定对象自身可枚举属性的键值对数组</h4>\n<h4 id=\"参数：-obj-：给定对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：给定对象\" aria-hidden=\"true\">#</a> 参数：[obj]：给定对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// (2) [Array(2), Array(2)]</span>\n                                  <span class=\"token comment\">//  0: (2) [\"name\", \"djlun\"]</span>\n                                  <span class=\"token comment\">//  1: (2) [\"age\", 18]</span>\n                                  <span class=\"token comment\">//  length: 2</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"将一个obj转化为map结构\"><a class=\"header-anchor\" href=\"#将一个obj转化为map结构\" aria-hidden=\"true\">#</a> 将一个obj转化为map结构</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Map(2) {\"name\" => \"djlun\", \"age\" => 18}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-getownpropertydescriptor\"><a class=\"header-anchor\" href=\"#object-getownpropertydescriptor\" aria-hidden=\"true\">#</a> Object.getOwnPropertyDescriptor()</h3>\n<h4 id=\"描述：返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\"><a class=\"header-anchor\" href=\"#描述：返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）\" aria-hidden=\"true\">#</a> 描述：返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</h4>\n<h4 id=\"参数：-obj-：指定对象；-prop-：指定对象的某个属性名称\"><a class=\"header-anchor\" href=\"#参数：-obj-：指定对象；-prop-：指定对象的某个属性名称\" aria-hidden=\"true\">#</a> 参数：[obj]：指定对象；[prop]：指定对象的某个属性名称</h4>\n<h4 id=\"返回值：如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined\"><a class=\"header-anchor\" href=\"#返回值：如果指定的属性存在于对象上，则返回其属性描述符对象（property-descriptor），否则返回-undefined\" aria-hidden=\"true\">#</a> 返回值：如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: \"djlun\", writable: true, enumerable: true, configurable: true}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-getownpropertynames\"><a class=\"header-anchor\" href=\"#object-getownpropertynames\" aria-hidden=\"true\">#</a> Object.getOwnPropertyNames()</h3>\n<h4 id=\"描述：返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括symbol值作为名称的属性）组成的数组\"><a class=\"header-anchor\" href=\"#描述：返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括symbol值作为名称的属性）组成的数组\" aria-hidden=\"true\">#</a> 描述：返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组</h4>\n<h4 id=\"参数：-obj-：指定对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：指定对象\" aria-hidden=\"true\">#</a> 参数：[obj]：指定对象</h4>\n<h4 id=\"返回值：在指定对象上找到的自身属性对应的字符串数组。\"><a class=\"header-anchor\" href=\"#返回值：在指定对象上找到的自身属性对应的字符串数组。\" aria-hidden=\"true\">#</a> 返回值：在指定对象上找到的自身属性对应的字符串数组。</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"name\", \"age\"]</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"0\", \"1\", \"length\"]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-getownpropertysymbols\"><a class=\"header-anchor\" href=\"#object-getownpropertysymbols\" aria-hidden=\"true\">#</a> Object.getOwnPropertySymbols()</h3>\n<h4 id=\"描述：返回一个给定对象自身的所有-symbol-属性的数组\"><a class=\"header-anchor\" href=\"#描述：返回一个给定对象自身的所有-symbol-属性的数组\" aria-hidden=\"true\">#</a> 描述：返回一个给定对象自身的所有 Symbol 属性的数组</h4>\n<h4 id=\"参数：-obj-：给定对象-2\"><a class=\"header-anchor\" href=\"#参数：-obj-：给定对象-2\" aria-hidden=\"true\">#</a> 参数：[obj]：给定对象</h4>\n<h4 id=\"返回值：返回在给定对象自身上找到的所有-symbol-属性的数组\"><a class=\"header-anchor\" href=\"#返回值：返回在给定对象自身上找到的所有-symbol-属性的数组\" aria-hidden=\"true\">#</a> 返回值：返回在给定对象自身上找到的所有 Symbol 属性的数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"localSymbol\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"globalSymbol\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {Symbol(a): \"localSymbol\", Symbol(b): \"globalSymbol\"}</span>\n<span class=\"token keyword\">var</span> objectSymbols <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objectSymbols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objectSymbols<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// [Symbol(a), Symbol(b)]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objectSymbols<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol(a)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-getprototypeof\"><a class=\"header-anchor\" href=\"#object-getprototypeof\" aria-hidden=\"true\">#</a> Object.getPrototypeOf()</h3>\n<h4 id=\"描述：返回指定对象的原型（即prototype属性的值）\"><a class=\"header-anchor\" href=\"#描述：返回指定对象的原型（即prototype属性的值）\" aria-hidden=\"true\">#</a> 描述：返回指定对象的原型（即prototype属性的值）</h4>\n<h4 id=\"参数：-obj-：指定对象-2\"><a class=\"header-anchor\" href=\"#参数：-obj-：指定对象-2\" aria-hidden=\"true\">#</a> 参数：[obj]：指定对象</h4>\n<h4 id=\"返回值：给定对象的原型。如果没有继承属性，则返回-null\"><a class=\"header-anchor\" href=\"#返回值：给定对象的原型。如果没有继承属性，则返回-null\" aria-hidden=\"true\">#</a> 返回值：给定对象的原型。如果没有继承属性，则返回 null</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> proto<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Object.getPrototypeOf(Object)  不是  Object.prototype :</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ƒ () { [native code] }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ƒ () { [native code] }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Object.getPrototypeOf( Object )是把Object这一构造函数看作对象，</span>\n<span class=\"token comment\">// 返回的当然是函数对象的原型，也就是 Function.prototype。</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// String {\"\", length: 0, constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"object-is\"><a class=\"header-anchor\" href=\"#object-is\" aria-hidden=\"true\">#</a> Object.is()</h3>\n<h4 id=\"描述：判断两个值是否是相同的值\"><a class=\"header-anchor\" href=\"#描述：判断两个值是否是相同的值\" aria-hidden=\"true\">#</a> 描述：判断两个值是否是相同的值</h4>\n<h4 id=\"参数：-val1-val2-：要进行判断的两个值\"><a class=\"header-anchor\" href=\"#参数：-val1-val2-：要进行判断的两个值\" aria-hidden=\"true\">#</a> 参数：[val1];[val2]：要进行判断的两个值</h4>\n<h4 id=\"返回值：相同返回true，不相同返回false\"><a class=\"header-anchor\" href=\"#返回值：相同返回true，不相同返回false\" aria-hidden=\"true\">#</a> 返回值：相同返回true，不相同返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> obj1\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Object.is() 判断两个值是否相同。如果下列任何一项成立，则两个值相同：</p>\n<ul>\n<li>两个值都是 undefined</li>\n<li>两个值都是 null</li>\n<li>两个值都是 true 或者都是 false</li>\n<li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li>\n<li>两个值指向同一个对象</li>\n<li>两个值都是数字并且\n<ol>\n<li>都是正零 +0</li>\n<li>都是负零 -0</li>\n<li>都是 NaN</li>\n<li>都是除零和 NaN 外的其它同一个数字</li>\n</ol>\n</li>\n</ul>\n<p>这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 &quot;&quot; == false 为 true 的现象），但 Object.is <em>不会做这种类型转换</em> 。</p>\n<p>这与===运算符也不一样。===运算符（和==运算符）将数字值-0和+0视为相等，并认为Number.NaN不等于NaN。</p>\n<hr>\n<h3 id=\"object-freeze\"><a class=\"header-anchor\" href=\"#object-freeze\" aria-hidden=\"true\">#</a> Object.freeze()</h3>\n<h4 id=\"描述：可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性\"><a class=\"header-anchor\" href=\"#描述：可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性\" aria-hidden=\"true\">#</a> 描述：可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性</h4>\n<h4 id=\"参数：-obj-：要被冻结的对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：要被冻结的对象\" aria-hidden=\"true\">#</a> 参数：[obj]：要被冻结的对象</h4>\n<h4 id=\"返回值：返回被冻结的对象\"><a class=\"header-anchor\" href=\"#返回值：返回被冻结的对象\" aria-hidden=\"true\">#</a> 返回值：返回被冻结的对象</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>一个对象被冻结后，如果更改它的属性，不在严格模式下不报错，只是改了也不变；严格模式下报错</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {name: \"djlun\"}</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'zwenj'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {name: \"djlun\"}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'use strict'</span>\n  obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'zwenj'</span> <span class=\"token comment\">// annot assign to read only property 'name' of object '#&lt;Object>'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-isfrozen\"><a class=\"header-anchor\" href=\"#object-isfrozen\" aria-hidden=\"true\">#</a> Object.isFrozen()</h3>\n<h4 id=\"描述：判断一个对象是否被冻结\"><a class=\"header-anchor\" href=\"#描述：判断一个对象是否被冻结\" aria-hidden=\"true\">#</a> 描述：判断一个对象是否被冻结</h4>\n<h4 id=\"参数：-obj-：被检测对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：被检测对象\" aria-hidden=\"true\">#</a> 参数：[obj]：被检测对象</h4>\n<h4 id=\"返回值：被冻结返回true，没被冻结返回false\"><a class=\"header-anchor\" href=\"#返回值：被冻结返回true，没被冻结返回false\" aria-hidden=\"true\">#</a> 返回值：被冻结返回true，没被冻结返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 一个对象默认是可扩展的,所以它也是非冻结的.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === false</span>\n\n<span class=\"token comment\">// 一个不可扩展的空对象同时也是一个冻结对象.</span>\n<span class=\"token keyword\">var</span> vacuouslyFrozen <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>vacuouslyFrozen<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true;</span>\n\n<span class=\"token comment\">// 一个非空对象默认也是非冻结的.</span>\n<span class=\"token keyword\">var</span> oneProp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>oneProp<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n\n<span class=\"token comment\">// 让这个对象变的不可扩展,并不意味着这个对象变成了冻结对象,</span>\n<span class=\"token comment\">// 因为p属性仍然是可以配置的(而且可写的).</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>oneProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>oneProp<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n\n<span class=\"token comment\">// ...如果删除了这个属性,则它会成为一个冻结对象.</span>\n<span class=\"token keyword\">delete</span> oneProp<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>oneProp<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 一个不可扩展的对象,拥有一个不可写但可配置的属性,则它仍然是非冻结的.</span>\n<span class=\"token keyword\">var</span> nonWritable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">:</span> <span class=\"token string\">\"plep\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>nonWritable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>nonWritable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 变得不可写</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>nonWritable<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n\n<span class=\"token comment\">// 把这个属性改为不可配置,会让这个对象成为冻结对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>nonWritable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 变得不可配置</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>nonWritable<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 一个不可扩展的对象,拥有一个不可配置但可写的属性,则它仍然是非冻结的.</span>\n<span class=\"token keyword\">var</span> nonConfigurable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> release<span class=\"token punctuation\">:</span> <span class=\"token string\">\"the kraken!\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>nonConfigurable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>nonConfigurable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>nonConfigurable<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n\n<span class=\"token comment\">// 把这个属性改为不可写,会让这个对象成为冻结对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>nonConfigurable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>nonConfigurable<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 一个不可扩展的对象,值拥有一个访问器属性,则它仍然是非冻结的.</span>\n<span class=\"token keyword\">var</span> accessor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token function\">food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"yum\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n\n<span class=\"token comment\">// ...但把这个属性改为不可配置,会让这个对象成为冻结对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">,</span> <span class=\"token string\">\"food\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 使用Object.freeze是冻结一个对象最方便的方法.</span>\n<span class=\"token keyword\">var</span> frozen <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 一个冻结对象也是一个密封对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n\n<span class=\"token comment\">// 当然,更是一个不可扩展的对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-seal\"><a class=\"header-anchor\" href=\"#object-seal\" aria-hidden=\"true\">#</a> Object.seal()</h3>\n<h4 id=\"描述：封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。\"><a class=\"header-anchor\" href=\"#描述：封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。\" aria-hidden=\"true\">#</a> 描述：封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</h4>\n<h4 id=\"参数：将要被封闭的对象\"><a class=\"header-anchor\" href=\"#参数：将要被封闭的对象\" aria-hidden=\"true\">#</a> 参数：将要被封闭的对象</h4>\n<h4 id=\"返回值：被封闭的对象\"><a class=\"header-anchor\" href=\"#返回值：被封闭的对象\" aria-hidden=\"true\">#</a> 返回值：被封闭的对象</h4>\n<p>使用Object.freeze()冻结的对象中的现有属性是不可变的。用Object.seal()密封的对象可以改变其现有属性。</p>\n<hr>\n<h3 id=\"object-issealed\"><a class=\"header-anchor\" href=\"#object-issealed\" aria-hidden=\"true\">#</a> Object.isSealed()</h3>\n<h4 id=\"描述：判断一个对象是否被密封\"><a class=\"header-anchor\" href=\"#描述：判断一个对象是否被密封\" aria-hidden=\"true\">#</a> 描述：判断一个对象是否被密封</h4>\n<h4 id=\"参数：-obj-：要被检查的对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：要被检查的对象\" aria-hidden=\"true\">#</a> 参数：[obj]：要被检查的对象</h4>\n<h4 id=\"返回值：被密封返回true，没被密封返回false\"><a class=\"header-anchor\" href=\"#返回值：被密封返回true，没被密封返回false\" aria-hidden=\"true\">#</a> 返回值：被密封返回true，没被密封返回false</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 新建的对象默认不是密封的.</span>\n<span class=\"token keyword\">var</span> empty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === false</span>\n\n<span class=\"token comment\">// 如果你把一个空对象变的不可扩展,则它同时也会变成个密封对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === true</span>\n\n<span class=\"token comment\">// 但如果这个对象不是空对象,则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的.</span>\n<span class=\"token keyword\">var</span> hasProp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> fee<span class=\"token punctuation\">:</span> <span class=\"token string\">\"fie foe fum\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>hasProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>hasProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === false</span>\n\n<span class=\"token comment\">// 如果把这个属性变的不可配置,则这个对象也就成了密封对象.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>hasProp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fee\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>hasProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === true</span>\n\n<span class=\"token comment\">// 最简单的方法来生成一个密封对象,当然是使用Object.seal.</span>\n<span class=\"token keyword\">var</span> sealed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>sealed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isSealed</span><span class=\"token punctuation\">(</span>sealed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === true</span>\n\n<span class=\"token comment\">// 一个密封对象同时也是不可扩展的.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>sealed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === false</span>\n\n<span class=\"token comment\">// 一个密封对象也可以是一个冻结对象,但不是必须的.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>sealed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === true ，所有的属性都是不可写的</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === false， 属性\"p\"可写</span>\n\n<span class=\"token keyword\">var</span> s3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// === true ，访问器属性不考虑可写不可写,只考虑是否可配置</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-preventextensions\"><a class=\"header-anchor\" href=\"#object-preventextensions\" aria-hidden=\"true\">#</a> Object.preventExtensions()</h3>\n<h4 id=\"描述：让一个对象变的不可扩展，也就是永远不能再添加新的属性。\"><a class=\"header-anchor\" href=\"#描述：让一个对象变的不可扩展，也就是永远不能再添加新的属性。\" aria-hidden=\"true\">#</a> 描述：让一个对象变的不可扩展，也就是永远不能再添加新的属性。</h4>\n<h4 id=\"参数：-obj-：将要变得不可扩展的对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：将要变得不可扩展的对象\" aria-hidden=\"true\">#</a> 参数：[obj]：将要变得不可扩展的对象</h4>\n<h4 id=\"返回值：已经不可扩展的对象\"><a class=\"header-anchor\" href=\"#返回值：已经不可扩展的对象\" aria-hidden=\"true\">#</a> 返回值：已经不可扩展的对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// Object.preventExtensions将原对象变的不可扩展,并且返回原对象.</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n \n<span class=\"token comment\">// 字面量方式定义的对象默认是可扩展的.</span>\n<span class=\"token keyword\">var</span> empty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== true</span>\n \n<span class=\"token comment\">// ...但可以改变.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span> <span class=\"token comment\">//=== false</span>\n \n<span class=\"token comment\">// 使用Object.defineProperty方法为一个不可扩展的对象添加新属性会抛出异常.</span>\n<span class=\"token keyword\">var</span> nonExtensible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> removable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>nonExtensible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>nonExtensible<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">8675309</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出TypeError异常</span>\n \n<span class=\"token comment\">// 在严格模式中,为一个不可扩展对象的新属性赋值会抛出TypeError异常.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  nonExtensible<span class=\"token punctuation\">.</span>newProperty <span class=\"token operator\">=</span> <span class=\"token string\">\"FAIL\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws a TypeError</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 一个不可扩展对象的原型是不可更改的,__proto__是个非标准魔法属性,可以更改一个对象的原型.</span>\n<span class=\"token keyword\">var</span> fixed <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfixed<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> oh<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hai\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出TypeError异常</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-isextensible\"><a class=\"header-anchor\" href=\"#object-isextensible\" aria-hidden=\"true\">#</a> Object.isExtensible()</h3>\n<h4 id=\"描述：判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）\"><a class=\"header-anchor\" href=\"#描述：判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）\" aria-hidden=\"true\">#</a> 描述：判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）</h4>\n<h4 id=\"参数：-obj-：需要检测的对象\"><a class=\"header-anchor\" href=\"#参数：-obj-：需要检测的对象\" aria-hidden=\"true\">#</a> 参数：[obj]：需要检测的对象</h4>\n<h4 id=\"返回值：可扩展返回true，不可扩展返回false\"><a class=\"header-anchor\" href=\"#返回值：可扩展返回true，不可扩展返回false\" aria-hidden=\"true\">#</a> 返回值：可扩展返回true，不可扩展返回false</h4>\n<p>Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 新对象默认是可扩展的.</span>\n<span class=\"token keyword\">var</span> empty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// ...可以变的不可扩展.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 密封对象是不可扩展的.</span>\n<span class=\"token keyword\">var</span> sealed <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>sealed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 冻结对象也是不可扩展.</span>\n<span class=\"token keyword\">var</span> frozen <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>frozen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-keys\"><a class=\"header-anchor\" href=\"#object-keys\" aria-hidden=\"true\">#</a> Object.keys()</h3>\n<h4 id=\"描述：返回一个由一个给定对象的自身可枚举-属性-组成的数组\"><a class=\"header-anchor\" href=\"#描述：返回一个由一个给定对象的自身可枚举-属性-组成的数组\" aria-hidden=\"true\">#</a> 描述：返回一个由一个给定对象的自身可枚举 <em>属性</em> 组成的数组</h4>\n<h4 id=\"参数：-obj-：给定对象-3\"><a class=\"header-anchor\" href=\"#参数：-obj-：给定对象-3\" aria-hidden=\"true\">#</a> 参数：[obj]：给定对象</h4>\n<h4 id=\"返回值：一个数组\"><a class=\"header-anchor\" href=\"#返回值：一个数组\" aria-hidden=\"true\">#</a> 返回值：一个数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// simple array</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console: ['0', '1', '2']</span>\n\n<span class=\"token comment\">// array like object</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console: ['0', '1', '2']</span>\n\n<span class=\"token comment\">// array like object with random key ordering</span>\n<span class=\"token keyword\">var</span> anObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>anObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console: ['2', '7', '100']</span>\n\n<span class=\"token comment\">// getFoo is a property which isn't enumerable</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  getFoo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console: ['foo']</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>如果你想获取一个对象的所有属性,，甚至包括不可枚举的，请查看Object.getOwnPropertyNames</p>\n</div>\n<hr>\n<h3 id=\"object-values\"><a class=\"header-anchor\" href=\"#object-values\" aria-hidden=\"true\">#</a> Object.values()</h3>\n<h4 id=\"描述：返回一个由一个给定对象自身的所有可枚举-属性值-组成的数组\"><a class=\"header-anchor\" href=\"#描述：返回一个由一个给定对象自身的所有可枚举-属性值-组成的数组\" aria-hidden=\"true\">#</a> 描述：返回一个由一个给定对象自身的所有可枚举 <em>属性值</em> 组成的数组</h4>\n<h4 id=\"参数：-obj-：给定对象-4\"><a class=\"header-anchor\" href=\"#参数：-obj-：给定对象-4\" aria-hidden=\"true\">#</a> 参数：[obj]：给定对象</h4>\n<h4 id=\"返回值：一个数组-2\"><a class=\"header-anchor\" href=\"#返回值：一个数组-2\" aria-hidden=\"true\">#</a> 返回值：一个数组</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['bar', 42]</span>\n\n<span class=\"token comment\">// array like object</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c']</span>\n\n<span class=\"token comment\">// array like object with random key ordering</span>\n<span class=\"token comment\">// when we use numeric keys, the value returned in a numerical order according to the keys</span>\n<span class=\"token keyword\">var</span> an_obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>an_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['b', 'c', 'a']</span>\n\n<span class=\"token comment\">// getFoo is property which isn't enumerable</span>\n<span class=\"token keyword\">var</span> my_obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> getFoo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmy_obj<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>my_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['bar']</span>\n\n<span class=\"token comment\">// non-object argument will be coerced to an object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['f', 'o', 'o']</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"object-setprototypeof\"><a class=\"header-anchor\" href=\"#object-setprototypeof\" aria-hidden=\"true\">#</a> Object.setPrototypeOf()</h3>\n<h4 id=\"描述：设置一个指定的对象的原型-即-内部-prototype-属性）到另一个对象或-null\"><a class=\"header-anchor\" href=\"#描述：设置一个指定的对象的原型-即-内部-prototype-属性）到另一个对象或-null\" aria-hidden=\"true\">#</a> 描述：设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null</h4>\n<div class=\"danger custom-block\"><p class=\"custom-block-title\">警告:</p>\n<p>由于现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的 [[Prototype]]在各个浏览器和 JavaScript 引擎上都是一个很慢的操作。其在更改继承的性能上的影响是微妙而又广泛的，这不仅仅限于 obj.<strong>proto</strong> = ... 语句上的时间花费，而且可能会延伸到任何代码，那些可以访问任何[[Prototype]]已被更改的对象的代码。如果你关心性能，你应该避免设置一个对象的 [[Prototype]]。相反，你应该使用 Object.create()来创建带有你想要的[[Prototype]]的新对象。</p>\n</div>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>Object.setPrototypeOf()是ECMAScript 6最新草案中的方法，相对于 Object.prototype.<strong>proto</strong> ，它被认为是修改对象原型更合适的方法</p>\n</div>\n<h2 id=\"继承方法：\"><a class=\"header-anchor\" href=\"#继承方法：\" aria-hidden=\"true\">#</a> 继承方法：</h2>\n<h3 id=\"hasownproperty\"><a class=\"header-anchor\" href=\"#hasownproperty\" aria-hidden=\"true\">#</a> hasOwnProperty()</h3>\n<h4 id=\"描述：判断对象自身属性中是否具有指定的属性\"><a class=\"header-anchor\" href=\"#描述：判断对象自身属性中是否具有指定的属性\" aria-hidden=\"true\">#</a> 描述：判断对象自身属性中是否具有指定的属性</h4>\n<h4 id=\"参数：-prop-：要判断的指定属性\"><a class=\"header-anchor\" href=\"#参数：-prop-：要判断的指定属性\" aria-hidden=\"true\">#</a> 参数：[prop]：要判断的指定属性</h4>\n<h4 id=\"返回值：有则返回true，没有则返回false\"><a class=\"header-anchor\" href=\"#返回值：有则返回true，没有则返回false\" aria-hidden=\"true\">#</a> 返回值：有则返回true，没有则返回false</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">'exists'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toString'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hasOwnProperty'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a obj property`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not a obj property`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// age is a obj property</span>\n<span class=\"token comment\">// name is not a obj property</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"isprototypeof\"><a class=\"header-anchor\" href=\"#isprototypeof\" aria-hidden=\"true\">#</a> isPrototypeOf()</h3>\n<h4 id=\"描述：用于测试一个对象是否存在于另一个对象的原型链上\"><a class=\"header-anchor\" href=\"#描述：用于测试一个对象是否存在于另一个对象的原型链上\" aria-hidden=\"true\">#</a> 描述：用于测试一个对象是否存在于另一个对象的原型链上</h4>\n<h4 id=\"参数：-obj-：在该对象的原型链上进行搜寻\"><a class=\"header-anchor\" href=\"#参数：-obj-：在该对象的原型链上进行搜寻\" aria-hidden=\"true\">#</a> 参数：[obj]：在该对象的原型链上进行搜寻</h4>\n<h4 id=\"返回值：调用对象在参数对象的原型链上则返回true，否则返回false\"><a class=\"header-anchor\" href=\"#返回值：调用对象在参数对象的原型链上则返回true，否则返回false\" aria-hidden=\"true\">#</a> 返回值：调用对象在参数对象的原型链上则返回true，否则返回false</h4>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>isPrototypeOf() 与 instanceof 运算符不同。在表达式 &quot;object instanceof AFunction&quot;中，object 的原型链是针对 AFunction.prototype 进行检查的，而不是针对 AFunction 本身。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nFn2<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Fn1<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFn3<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Fn2<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Fn3<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Fn2<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Fn1<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 可用来检查某一对象是否继承自某一对象</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"propertyisenumerable\"><a class=\"header-anchor\" href=\"#propertyisenumerable\" aria-hidden=\"true\">#</a> propertyIsEnumerable()</h3>\n<h4 id=\"描述：判断对象中指定的属性是否可以被for-in循环枚举，但是通过原型链继承的属性除外\"><a class=\"header-anchor\" href=\"#描述：判断对象中指定的属性是否可以被for-in循环枚举，但是通过原型链继承的属性除外\" aria-hidden=\"true\">#</a> 描述：判断对象中指定的属性是否可以被for...in循环枚举，但是通过原型链继承的属性除外</h4>\n<h4 id=\"参数：-prop-：指定属性\"><a class=\"header-anchor\" href=\"#参数：-prop-：指定属性\" aria-hidden=\"true\">#</a> 参数：[prop]：指定属性</h4>\n<h4 id=\"返回值：指定属性可枚举，则返回true，不可枚举或者对象没有指定的属性，则返回false\"><a class=\"header-anchor\" href=\"#返回值：指定属性可枚举，则返回true，不可枚举或者对象没有指定的属性，则返回false\" aria-hidden=\"true\">#</a> 返回值：指定属性可枚举，则返回true，不可枚举或者对象没有指定的属性，则返回false</h4>\n<hr>\n<h3 id=\"tolocalestring\"><a class=\"header-anchor\" href=\"#tolocalestring\" aria-hidden=\"true\">#</a> toLocaleString()</h3>\n<h4 id=\"描述：返回一个该对象的字符串表示\"><a class=\"header-anchor\" href=\"#描述：返回一个该对象的字符串表示\" aria-hidden=\"true\">#</a> 描述：返回一个该对象的字符串表示</h4>\n<h4 id=\"返回值：字符串\"><a class=\"header-anchor\" href=\"#返回值：字符串\" aria-hidden=\"true\">#</a> 返回值：字符串</h4>\n<hr>\n<h3 id=\"tostring\"><a class=\"header-anchor\" href=\"#tostring\" aria-hidden=\"true\">#</a> toString()</h3>\n<h4 id=\"描述：返回一个表示该对象的字符串\"><a class=\"header-anchor\" href=\"#描述：返回一个表示该对象的字符串\" aria-hidden=\"true\">#</a> 描述：返回一个表示该对象的字符串</h4>\n<h4 id=\"返回值：字符串-2\"><a class=\"header-anchor\" href=\"#返回值：字符串-2\" aria-hidden=\"true\">#</a> 返回值：字符串</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'djlun'</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"watch\"><a class=\"header-anchor\" href=\"#watch\" aria-hidden=\"true\">#</a> watch()</h3>\n<h4 id=\"描述：监视属性是否被赋值并在赋值时运行相关函数\"><a class=\"header-anchor\" href=\"#描述：监视属性是否被赋值并在赋值时运行相关函数\" aria-hidden=\"true\">#</a> 描述：监视属性是否被赋值并在赋值时运行相关函数</h4>\n<p>暂不了解</p>\n<hr>\n<h3 id=\"unwatch\"><a class=\"header-anchor\" href=\"#unwatch\" aria-hidden=\"true\">#</a> unwatch()</h3>\n<h4 id=\"描述：删除一个-watch-设置的-watchpoint\"><a class=\"header-anchor\" href=\"#描述：删除一个-watch-设置的-watchpoint\" aria-hidden=\"true\">#</a> 描述：删除一个 watch() 设置的 watchpoint</h4>\n<p>暂不了解</p>\n<hr>\n<h2 id=\"运算符\"><a class=\"header-anchor\" href=\"#运算符\" aria-hidden=\"true\">#</a> <router-link to=\"/jsdoc/operator.html\">运算符</router-link></h2>\n</div>\n",null]}