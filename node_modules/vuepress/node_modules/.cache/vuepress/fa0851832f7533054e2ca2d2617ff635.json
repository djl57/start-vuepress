{"remainingRequest":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\github\\start-vuepress\\docs\\jsdoc\\axios.md?vue&type=template&id=40c54b6d&","dependencies":[{"path":"E:\\github\\start-vuepress\\docs\\jsdoc\\axios.md","mtime":1548383054781},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"axios\"><a class=\"header-anchor\" href=\"#axios\" aria-hidden=\"true\">#</a> axios</h1>\n<p><a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档<OutboundLink/></a></p>\n<h2 id=\"安装\"><a class=\"header-anchor\" href=\"#安装\" aria-hidden=\"true\">#</a> 安装</h2>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>npm install axios\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"get请求\"><a class=\"header-anchor\" href=\"#get请求\" aria-hidden=\"true\">#</a> get请求</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 为给定 ID 的 user 创建请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user?ID=12345'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 可选地，上面的请求可以这样做</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12345</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"post请求\"><a class=\"header-anchor\" href=\"#post请求\" aria-hidden=\"true\">#</a> post请求</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Flintstone'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"多个并发请求\"><a class=\"header-anchor\" href=\"#多个并发请求\" aria-hidden=\"true\">#</a> 多个并发请求</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getUserAccount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getUserPermissions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345/permissions'</span><span class=\"token punctuation\">)</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">getUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUserPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>acct<span class=\"token punctuation\">,</span> perms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 两个请求现在都执行完成</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"api\"><a class=\"header-anchor\" href=\"#api\" aria-hidden=\"true\">#</a> api</h2>\n<h3 id=\"axios-config\"><a class=\"header-anchor\" href=\"#axios-config\" aria-hidden=\"true\">#</a> axios(config)</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Flintstone'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"方法的别名\"><a class=\"header-anchor\" href=\"#方法的别名\" aria-hidden=\"true\">#</a> 方法的别名</h3>\n<p>为方便起见，为所有支持的请求方法提供了别名</p>\n<ul>\n<li>axios.request(config)</li>\n<li>axios.get(url[, config])</li>\n<li>axios.delete(url[, config])</li>\n<li>axios.head(url[, config])</li>\n<li>axios.post(url[, data[, config]])</li>\n<li>axios.put(url[, data[, config]])</li>\n<li>axios.patch(url[, data[, config]])</li>\n</ul>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</div>\n<h3 id=\"并发\"><a class=\"header-anchor\" href=\"#并发\" aria-hidden=\"true\">#</a> 并发</h3>\n<ul>\n<li>axios.all(iterable)</li>\n<li>axios.spread(callback)</li>\n</ul>\n<h3 id=\"创建实例\"><a class=\"header-anchor\" href=\"#创建实例\" aria-hidden=\"true\">#</a> 创建实例</h3>\n<p><code>axios.create([config])</code></p>\n<h4 id=\"请求配置\"><a class=\"header-anchor\" href=\"#请求配置\" aria-hidden=\"true\">#</a> 请求配置</h4>\n<p>创建请求时可以用的配置选项。</p>\n<p>只有 url 是必需的。</p>\n<p>如果没有指定 method，请求将默认使用 get 方法</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `url` 是用于请求的服务器 URL</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `method` 是创建请求时使用的方法</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认是 get</span>\n\n  <span class=\"token comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span>\n  <span class=\"token comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>\n  baseURL<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span>\n  <span class=\"token comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span>\n  <span class=\"token comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span>\n  transformRequest<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>\n  transformResponse<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `headers` 是即将被发送的自定义请求头</span>\n  headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'XMLHttpRequest'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `params` 是即将与请求一起发送的 URL 参数</span>\n  <span class=\"token comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span>\n  params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ID</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12345</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span>\n  <span class=\"token comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>\n  paramsSerializer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>arrayFormat<span class=\"token punctuation\">:</span> <span class=\"token string\">'brackets'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `data` 是作为请求主体被发送的数据</span>\n  <span class=\"token comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span>\n  <span class=\"token comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span>\n  <span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>\n  <span class=\"token comment\">// - 浏览器专属：FormData, File, Blob</span>\n  <span class=\"token comment\">// - Node 专属： Stream</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Fred'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span>\n  <span class=\"token comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span>\n  timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>\n  withCredentials<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认的</span>\n\n  <span class=\"token comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span>\n  <span class=\"token comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span>\n  adapter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span>\n  <span class=\"token comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span>\n  auth<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'janedoe'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'s00pers3cret'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span>\n  responseType<span class=\"token punctuation\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认的</span>\n\n  <span class=\"token comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span>\n  xsrfCookieName<span class=\"token punctuation\">:</span> <span class=\"token string\">'XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span>\n  xsrfHeaderName<span class=\"token punctuation\">:</span> <span class=\"token string\">'X-XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认的</span>\n\n  <span class=\"token comment\">// `onUploadProgress` 允许为上传处理进度事件</span>\n  onUploadProgress<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>progressEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对原生进度事件的处理</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `onDownloadProgress` 允许为下载处理进度事件</span>\n  onDownloadProgress<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>progressEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对原生进度事件的处理</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span>\n  maxContentLength<span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span>\n  validateStatus<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认的</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span>\n  <span class=\"token comment\">// 如果设置为0，将不会 follow 任何重定向</span>\n  maxRedirects<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认的</span>\n\n  <span class=\"token comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span>\n  <span class=\"token comment\">// `keepAlive` 默认没有启用</span>\n  httpAgent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">http<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">https<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> keepAlive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 'proxy' 定义代理服务器的主机名称和端口</span>\n  <span class=\"token comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span>\n  <span class=\"token comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span>\n  proxy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    auth<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">:</span> <span class=\"token string\">'mikeymike'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">:</span> <span class=\"token string\">'rapunz3l'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `cancelToken` 指定用于取消请求的 cancel token</span>\n  <span class=\"token comment\">// （查看后面的 Cancellation 这节了解更多）</span>\n  cancelToken<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>cancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"拦截器\"><a class=\"header-anchor\" href=\"#拦截器\" aria-hidden=\"true\">#</a> 拦截器</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 添加请求拦截器</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在发送请求之前做些什么</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对请求错误做些什么</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 添加响应拦截器</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对响应数据做点什么</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 对响应错误做点什么</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"取消请求\"><a class=\"header-anchor\" href=\"#取消请求\" aria-hidden=\"true\">#</a> 取消请求</h2>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> CancelToken <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>CancelToken<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> CancelToken<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  cancelToken<span class=\"token punctuation\">:</span> source<span class=\"token punctuation\">.</span>token\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>thrown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">isCancel</span><span class=\"token punctuation\">(</span>thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request canceled'</span><span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理错误</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 取消请求（message 参数是可选的）</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation canceled by the user.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}