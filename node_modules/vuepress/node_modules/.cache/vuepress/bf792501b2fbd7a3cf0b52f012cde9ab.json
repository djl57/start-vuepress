{"remainingRequest":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\github\\start-vuepress\\docs\\jsdoc\\async.md?vue&type=template&id=702362a0&","dependencies":[{"path":"E:\\github\\start-vuepress\\docs\\jsdoc\\async.md","mtime":1548227585841},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\github\\start-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"async-await-yield-function\"><a class=\"header-anchor\" href=\"#async-await-yield-function\" aria-hidden=\"true\">#</a> async await || yield function*</h1>\n<h2 id=\"asyncfunction构造函数\"><a class=\"header-anchor\" href=\"#asyncfunction构造函数\" aria-hidden=\"true\">#</a> AsyncFunction构造函数</h2>\n<h4 id=\"描述：用来创建新的-异步函数-对象，javascript-中每个异步函数都是-asyncfunction-的对象\"><a class=\"header-anchor\" href=\"#描述：用来创建新的-异步函数-对象，javascript-中每个异步函数都是-asyncfunction-的对象\" aria-hidden=\"true\">#</a> 描述：用来创建新的 异步函数 对象，JavaScript 中每个异步函数都是  AsyncFunction 的对象</h4>\n<h4 id=\"语法：\"><a class=\"header-anchor\" href=\"#语法：\" aria-hidden=\"true\">#</a> 语法：</h4>\n<p><code>new AsyncFunction([args] functionBody)</code></p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>AsyncFunction 并不是一个全局对象，需要通过下面的方法来获取：\nObject.getPrototypeOf(async function(){}).constructor</p>\n</div>\n<h4 id=\"参数：-args-：函数的参数名（一个或多个用逗号隔开的字符串）\"><a class=\"header-anchor\" href=\"#参数：-args-：函数的参数名（一个或多个用逗号隔开的字符串）\" aria-hidden=\"true\">#</a> 参数：[args]：函数的参数名（一个或多个用逗号隔开的字符串）</h4>\n<div class=\"danger custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>执行 AsyncFunction 构造函数的时候，会创建一个 异步函数 对象。但是这种方式不如先用 异步函数表达式 定义一个异步函数，然后再调用其来创建 异步函数 对象来的高效，因为第二种方式中异步函数是与其他代码一起被解释器解析的，而第一种方式的函数体是单独解析的。</p>\n</div>\n<h4 id=\"通过-asyncfunction-构造器创建一个异步函数\"><a class=\"header-anchor\" href=\"#通过-asyncfunction-构造器创建一个异步函数\" aria-hidden=\"true\">#</a> 通过 AsyncFunction 构造器创建一个异步函数</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> AsyncFunction <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return await resolveAfter2Seconds(a) + await resolveAfter2Seconds(b);'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 秒后打印 30</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"async-function-声明（异步函数语句）\"><a class=\"header-anchor\" href=\"#async-function-声明（异步函数语句）\" aria-hidden=\"true\">#</a> async function 声明（异步函数语句）</h2>\n<h4 id=\"描述：用于定义一个返回-asyncfunction-对象的异步函数。\"><a class=\"header-anchor\" href=\"#描述：用于定义一个返回-asyncfunction-对象的异步函数。\" aria-hidden=\"true\">#</a> 描述：用于定义一个返回 AsyncFunction 对象的异步函数。</h4>\n<p>异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。</p>\n<h4 id=\"语法：-2\"><a class=\"header-anchor\" href=\"#语法：-2\" aria-hidden=\"true\">#</a> 语法：</h4>\n<p><code>async function name([params]) { }</code></p>\n<h4 id=\"参数：-name-：此异步函数的名称；-params-：形参；\"><a class=\"header-anchor\" href=\"#参数：-name-：此异步函数的名称；-params-：形参；\" aria-hidden=\"true\">#</a> 参数：[name]：此异步函数的名称；[params]：形参；</h4>\n<h4 id=\"返回值：一个返回的promise对象会以async-function的返回值进行解析-resolved-，或者以该函数抛出的异常进行回绝-rejected\"><a class=\"header-anchor\" href=\"#返回值：一个返回的promise对象会以async-function的返回值进行解析-resolved-，或者以该函数抛出的异常进行回绝-rejected\" aria-hidden=\"true\">#</a> 返回值：一个返回的Promise对象会以async function的返回值进行解析(resolved)，或者以该函数抛出的异常进行回绝(rejected)</h4>\n<ul>\n<li>当调用一个 async 函数时，会返回一个 Promise 对象。</li>\n<li>当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。</li>\n<li>async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待 Promise  的结果出来，然后恢复async函数的执行并返回解析值（resolved）。</li>\n<li>注意， await 关键字仅仅在 async function中有效。如果在 async function函数体外使用 await ，你只会得到一个语法错误（SyntaxError）。</li>\n<li>async/await的用途是简化使用 promises 异步调用的操作，并对一组 Promises执行某些操作。正如Promises类似于结构化回调，async/await类似于组合生成器和 promises。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">resolveAfter2Seconds</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用了 返回延时2s的 Promise 的函数（fn1）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"延时2s的 Promise 执行完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">resolveAfter1Second</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用了 返回延时1s的 Promise 的函数（fn2）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"延时1s的 Promise 执行完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在sequentialStart中，程序为第一个await停留了2秒，然后又为第二个await停留了1秒。直到第一个计时器结束后，第二个计时器才被创建</span>\n<span class=\"token comment\">// 第一个完了之后第二个开始</span>\n<span class=\"token keyword\">var</span> sequentialStart <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'调用了 一个异步函数sequentialStart，此异步函数依次执行了fn1和fn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果 await 操作符后的表达式不是一个 Promise 对象, 则它会被转换成一个 resolved 状态的 Promise 对象</span>\n  <span class=\"token keyword\">const</span> slow <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fast <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolveAfter1Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slow:'</span> <span class=\"token operator\">+</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fast:'</span> <span class=\"token operator\">+</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 在 concurrentStart中，两个计时器均被创建，然后一起被await。这两个计时器同时运行的，但await的调用仍然是按顺序运行的，</span>\n<span class=\"token comment\">// 这意味着第二个await会等到第一个await运行结束。这使得代码完成运行只需要2秒，而不是3秒。这2秒是由最慢的计时器决定的。</span>\n<span class=\"token comment\">// 第一个，第二个一起开始，慢的在前面的话会影响快的，慢的在后面的话不影响</span>\n<span class=\"token keyword\">var</span> concurrentStart <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'调用了 一个异步函数concurrentStart，此异步函数依次执行了fn1和fn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> slow <span class=\"token operator\">=</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 立即启动计时器</span>\n  <span class=\"token keyword\">const</span> fast <span class=\"token operator\">=</span> <span class=\"token function\">resolveAfter1Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待 slow 完成, fast 也已经完成。</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// stillSerial与concurrentStart的情况一样</span>\n<span class=\"token comment\">// 第一个，第二个一起开始，慢的一定会会影响快的</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">stillSerial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'调用了 一个异步函数stillSerial，此异步函数all了fn1和fn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolveAfter1Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">,</span> fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 各自完成。互相无时间影响</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">parallel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'==PARALLEL with Promise.then=='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这种情况下可以简写成 console.log(resolveAfter2Seconds());</span>\n  <span class=\"token function\">resolveAfter1Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sequentialStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 两秒后，输出 “slow”，1秒之后，输出“fast”</span>\n<span class=\"token comment\">// 等到 sequentialStart() 完成</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>concurrentStart<span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 两秒之后，输出“slow”，然后输出“fast”</span>\n<span class=\"token comment\">// 等到 setTimeout(concurrentStart, 4000) 完成</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>stillSerial<span class=\"token punctuation\">,</span> <span class=\"token number\">7000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和concurrentStart一样</span>\n<span class=\"token comment\">// 等到 setTimeout(stillSerial, 7000) 完成</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>parallel<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 真正的并行运行：一秒之后，输出“fast”，然后1秒之后，输出“slow”</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"通过async函数重写-promise-链\"><a class=\"header-anchor\" href=\"#通过async函数重写-promise-链\" aria-hidden=\"true\">#</a> 通过async函数重写 promise 链</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">downloadData</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">downloadFallbackData</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">processDataInWorker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fail3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 使用Promise</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getProcessedData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回一个 promise 对象</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">downloadFallbackData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 返回一个 promise 对象</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">processDataInWorker</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个 promise 对象</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getProcessedData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token comment\">// success3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 使用async</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getProcessedDataAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> v<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    v <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadFallbackData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">processDataInWorker</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getProcessedDataAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123.html'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// success3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"async-function-关键字（异步函数表达式）\"><a class=\"header-anchor\" href=\"#async-function-关键字（异步函数表达式）\" aria-hidden=\"true\">#</a> async function 关键字（异步函数表达式）</h2>\n<h4 id=\"描述：在表达式中定义异步函数\"><a class=\"header-anchor\" href=\"#描述：在表达式中定义异步函数\" aria-hidden=\"true\">#</a> 描述：在表达式中定义异步函数</h4>\n<h4 id=\"语法：-3\"><a class=\"header-anchor\" href=\"#语法：-3\" aria-hidden=\"true\">#</a> 语法：</h4>\n<p><code>async function [name]([params]) { }</code></p>\n<h4 id=\"参数：-name-：此异步函数的名称；-params-：形参；-2\"><a class=\"header-anchor\" href=\"#参数：-name-：此异步函数的名称；-params-：形参；-2\" aria-hidden=\"true\">#</a> 参数：[name]：此异步函数的名称；[params]：形参；</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4 秒后打印 60</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 立即执行异步函数</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> p_a <span class=\"token operator\">=</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> p_b <span class=\"token operator\">=</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token keyword\">await</span> p_a <span class=\"token operator\">+</span> <span class=\"token keyword\">await</span> p_b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2 秒后打印 60</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"await\"><a class=\"header-anchor\" href=\"#await\" aria-hidden=\"true\">#</a> await</h2>\n<h4 id=\"描述：用于等待一个promise-对象\"><a class=\"header-anchor\" href=\"#描述：用于等待一个promise-对象\" aria-hidden=\"true\">#</a> 描述：用于等待一个Promise 对象</h4>\n<h4 id=\"语法：-return-value-await-expression\"><a class=\"header-anchor\" href=\"#语法：-return-value-await-expression\" aria-hidden=\"true\">#</a> 语法：[return_value] = await expression;</h4>\n<h4 id=\"参数：-expression-：一个-promise-对象或者任何要等待的值\"><a class=\"header-anchor\" href=\"#参数：-expression-：一个-promise-对象或者任何要等待的值\" aria-hidden=\"true\">#</a> 参数：[expression]：一个 Promise 对象或者任何要等待的值</h4>\n<h4 id=\"返回值：返回-promise-对象的处理结果。如果等待的不是-promise-对象，则返回该值本身\"><a class=\"header-anchor\" href=\"#返回值：返回-promise-对象的处理结果。如果等待的不是-promise-对象，则返回该值本身\" aria-hidden=\"true\">#</a> 返回值：返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身</h4>\n<ul>\n<li>await 表达式会暂停当前 async function 的执行，等待 Promise 处理完成</li>\n<li>若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 async function；若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resolveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2秒后打印 10</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 立即打印20</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果等待的Promise执行结果为异常，则抛出异常值</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 立即打印30</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"function关键字（function表达式）\"><a class=\"header-anchor\" href=\"#function关键字（function表达式）\" aria-hidden=\"true\">#</a> function<em>关键字（function</em>表达式）</h2>\n<h4 id=\"描述：可以在表达式内部定义一个生成器函数\"><a class=\"header-anchor\" href=\"#描述：可以在表达式内部定义一个生成器函数\" aria-hidden=\"true\">#</a> 描述：可以在表达式内部定义一个生成器函数</h4>\n<h4 id=\"语法：-4\"><a class=\"header-anchor\" href=\"#语法：-4\" aria-hidden=\"true\">#</a> 语法：</h4>\n<p><code>function* [name]([params]) { }</code></p>\n<h4 id=\"参数：-name-：生成器函数的名字；-params-：参数；\"><a class=\"header-anchor\" href=\"#参数：-name-：生成器函数的名字；-params-：参数；\" aria-hidden=\"true\">#</a> 参数：[name]：生成器函数的名字；[params]：参数；</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 定义了一个未命名的生成器函数并把它赋值给x。函数产出它的传入参数的平方：</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"function-声明\"><a class=\"header-anchor\" href=\"#function-声明\" aria-hidden=\"true\">#</a> function*声明</h2>\n<h4 id=\"描述：这种声明方式会定义一个生成器函数-generator-function-，它返回一个-generator-对象。\"><a class=\"header-anchor\" href=\"#描述：这种声明方式会定义一个生成器函数-generator-function-，它返回一个-generator-对象。\" aria-hidden=\"true\">#</a> 描述：这种声明方式会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。</h4>\n<h4 id=\"语法：-5\"><a class=\"header-anchor\" href=\"#语法：-5\" aria-hidden=\"true\">#</a> 语法：</h4>\n<p><code>function* name([params]) { }</code></p>\n<h4 id=\"参数：-name-：生成器函数的名字；-params-：参数；-2\"><a class=\"header-anchor\" href=\"#参数：-name-：生成器函数的名字；-params-：参数；-2\" aria-hidden=\"true\">#</a> 参数：[name]：生成器函数的名字；[params]：参数；</h4>\n<ul>\n<li>\n<p>生成器函数在执行时能暂停，后面又能从暂停处继续执行。</p>\n</li>\n<li>\n<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （iterator ）对象。</p>\n</li>\n<li>\n<p>当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield的位置为止，yield 后紧跟迭代器要返回的值。</p>\n</li>\n<li>\n<p>或者如果用的是 yield*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p>\n</li>\n<li>\n<p>next()方法返回一个对象</p>\n</li>\n<li>\n<p>这个对象包含两个属性：value 和 done</p>\n</li>\n<li>\n<p>value 属性表示本次 yield 表达式的返回值</p>\n</li>\n<li>\n<p>done 属性为布尔类型，表示生成器后续是否还有 yield 语句，即生成器函数是否已经执行完毕并返回</p>\n</li>\n</ul>\n<p>调用 next()方法时，如果传入了参数，那么这个参数会作为上一条执行的  yield 语句的返回值，例如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> gen_obj <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen_obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行 yield 10，返回 {value: 10, done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen_obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行 yield 'foo'，{value: \"foo\", done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen_obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 10 赋给上一条 yield 'foo' 的左值，即执行 y=10，返回 {value: 10, done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen_obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行完毕，{value: undefined, done: true}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"yield-关键字\"><a class=\"header-anchor\" href=\"#yield-关键字\" aria-hidden=\"true\">#</a> yield 关键字</h2>\n<h4 id=\"描述：用来暂停和恢复一个生成器函数\"><a class=\"header-anchor\" href=\"#描述：用来暂停和恢复一个生成器函数\" aria-hidden=\"true\">#</a> 描述：用来暂停和恢复一个生成器函数</h4>\n<hr>\n<h2 id=\"yield-表达式\"><a class=\"header-anchor\" href=\"#yield-表达式\" aria-hidden=\"true\">#</a> yield* 表达式</h2>\n<h4 id=\"描述：用于委托给另一个generator-或可迭代对象\"><a class=\"header-anchor\" href=\"#描述：用于委托给另一个generator-或可迭代对象\" aria-hidden=\"true\">#</a> 描述：用于委托给另一个generator 或可迭代对象</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">g1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">g2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 3, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 4, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 5, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token string\">\"34\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">g3</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 1, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: \"3\", done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: \"4\", done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 5, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: 6, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}